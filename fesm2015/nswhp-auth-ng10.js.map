{"version":3,"file":"nswhp-auth-ng10.js","sources":["../../../projects/nswhpauth/src/lib/nswhpauth-config.ts","../../../projects/nswhpauth/src/lib/nswhpauth.service.ts","../../../projects/nswhpauth/src/lib/authentication-material/nswhpauth-material.module.ts","../../../projects/nswhpauth/src/lib/services/storage.service.ts","../../../projects/nswhpauth/src/lib/services/aad.service.ts","../../../projects/nswhpauth/src/lib/components/azure-login/azure-login.component.ts","../../../projects/nswhpauth/src/lib/components/azure-login/azure-login.component.html","../../../projects/nswhpauth/src/lib/components/azure-logout/azure-logout.component.ts","../../../projects/nswhpauth/src/lib/components/contact-admin/contact-admin.component.ts","../../../projects/nswhpauth/src/lib/components/contact-admin/contact-admin.component.html","../../../projects/nswhpauth/src/lib/services/iadfp.service.ts","../../../projects/nswhpauth/src/lib/services/vip.service.ts","../../../projects/nswhpauth/src/lib/components/tick/tick.component.ts","../../../projects/nswhpauth/src/lib/components/tick/tick.component.html","../../../projects/nswhpauth/src/lib/components/otp/otp.component.html","../../../projects/nswhpauth/src/lib/components/otp/otp.component.ts","../../../projects/nswhpauth/src/lib/components/spinner/spinner.component.ts","../../../projects/nswhpauth/src/lib/components/spinner/spinner.component.html","../../../projects/nswhpauth/src/lib/components/push/push.component.html","../../../projects/nswhpauth/src/lib/components/push/push.component.ts","../../../projects/nswhpauth/src/lib/components/register/register.component.html","../../../projects/nswhpauth/src/lib/components/register/register.component.ts","../../../projects/nswhpauth/src/lib/services/AuthenticationInterceptor.service.ts","../../../projects/nswhpauth/src/lib/nswhpauth.module.ts","../../../projects/nswhpauth/src/lib/nswhpauth.routing.module.ts","../../../projects/nswhpauth/src/public-api.ts","../../../projects/nswhpauth/src/nswhp-auth-ng10.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nexport interface INswhpAuthServiceOptions {\r\n  vip: {\r\n    stepUpPath: string,\r\n    domain: string\r\n  };\r\n  adalConfig: adal.Config[];\r\n  adal: {\r\n    pushUrl: string,\r\n    otpUrl: string,\r\n    sendOtpUrl: string,\r\n    registerUrl: string,\r\n  };\r\n}\r\nexport const NSWHP_AUTH_CONFIG = new InjectionToken<INswhpAuthServiceOptions>('NSWHP_AUTH_CONFIG');\r\n","import { Inject, Injectable } from '@angular/core';\nimport { INswhpAuthServiceOptions, NSWHP_AUTH_CONFIG } from './nswhpauth-config';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NswhpAuthService {\n  public nswhpAuthOptions: INswhpAuthServiceOptions;\n  constructor(\n    @Inject(NSWHP_AUTH_CONFIG) options: INswhpAuthServiceOptions,\n  ) {\n    this.nswhpAuthOptions = options;\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\nconst modules = [\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatChipsModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatRadioModule,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    modules\r\n  ],\r\n  exports: [\r\n    modules\r\n  ]\r\n})\r\nexport class NswhpAuthMaterialModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport * as jwtDecode_ from 'jwt-decode';\r\n\r\nconst jwtDecode = jwtDecode_;\r\n@Injectable()\r\nexport class StorageService {\r\n\r\n  // Storage keys\r\n  private TRANSACTION_ID = 'TRANSACTION_ID';\r\n  private VIP_TOKEN = 'VIP_TOKEN';\r\n  private AZURE_INSTANCE = 'AZURE_INSTANCE';\r\n  private LAST_LOCATION = 'LAST_LOCATION';\r\n\r\n  constructor() { }\r\n\r\n  // VIP TOKEN\r\n  public storeVipToken(token: string) {\r\n    localStorage.setItem(this.VIP_TOKEN, token);\r\n  }\r\n  public retrieveVipToken() {\r\n    return localStorage.getItem(this.VIP_TOKEN);\r\n  }\r\n  public clearVipToken() {\r\n    localStorage.removeItem(this.VIP_TOKEN);\r\n  }\r\n\r\n  // LAST LAST_LOCATION\r\n  public storeLastLocation() {\r\n    const location = `${window.location.pathname}${window.location.search}`;\r\n    console.debug('### Storing last location:');\r\n    console.debug(window.location);\r\n    console.debug('### location = ' + location);\r\n    localStorage.setItem(this.LAST_LOCATION, location);\r\n  }\r\n  public retrieveLastLocation(): string {\r\n    console.debug(`### Retrieving last location: ${localStorage.getItem(this.LAST_LOCATION)}`);\r\n    return localStorage.getItem(this.LAST_LOCATION);\r\n  }\r\n  public clearLastLocation() {\r\n    console.debug('### Clearing the last location');\r\n    localStorage.removeItem(this.LAST_LOCATION);\r\n  }\r\n\r\n  // TRANSACTION ID\r\n  public storeTransactionId(token: string) {\r\n    localStorage.setItem(this.TRANSACTION_ID, token);\r\n  }\r\n\r\n  public retrieveTransactionId() {\r\n    return localStorage.getItem(this.TRANSACTION_ID);\r\n  }\r\n\r\n  public clearTransactionId() {\r\n    localStorage.removeItem(this.TRANSACTION_ID);\r\n  }\r\n\r\n  // AZURE INSTANCE\r\n  public storeAzureInstance(instance: number) {\r\n    localStorage.setItem(this.AZURE_INSTANCE, instance.toString());\r\n  }\r\n\r\n  public retrieveAzureInstance(): number {\r\n    return parseInt(localStorage.getItem(this.AZURE_INSTANCE), 10);\r\n  }\r\n\r\n  public retrieveAzureTenantId(): string {\r\n    const azureToken = localStorage.getItem('adal.idtoken');\r\n    if (azureToken) {\r\n      const decodedToken = jwtDecode(azureToken) as any;\r\n      // tslint:disable-next-line: no-string-literal\r\n      return decodedToken['tid'] as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public clearAzureInstance() {\r\n    localStorage.removeItem(this.AZURE_INSTANCE);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AdalService } from 'adal-angular4';\r\nimport { StorageService } from './storage.service';\r\nimport { NswhpAuthService } from '../nswhpauth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AadService {\r\n  static readonly AZURE_AD_INSTANCE = 0;\r\n  static readonly AZURE_B2C_INSTANCE = 1; // Not used because the app only supports Health AD Logins.\r\n\r\n  /** The index of the adalConfig to use set by clicking the login buttons or through the route parameter */\r\n  public configIndex: number;\r\n  // Adal configs\r\n  private adalConfigs: adal.Config[];\r\n\r\n  /** Takes an integer and returns true if it is in a valid range for the config array */\r\n  public isValidAdalConfigIndex(index: number) {\r\n    return index !== null && index >= 0 && index < this.adalConfigs.length;\r\n  }\r\n\r\n  constructor(\r\n    private adalService: AdalService,\r\n    private storage: StorageService,\r\n    private nswhpAuthService: NswhpAuthService\r\n  ) {\r\n    this.adalConfigs = this.nswhpAuthService.nswhpAuthOptions.adalConfig;\r\n  }\r\n\r\n  /**\r\n   * initialises the Adal service with the config specified by configIndex\r\n   * @param configIndex - Determines which config will be selected, used as an index on `this.adalConfigs`\r\n   * @example\r\n   * if (aadService.isValidAdalConfigIndex(index)) {\r\n   *     intialiseAdalServiceWithConfig(index);\r\n   * }\r\n   */\r\n  public initialiseAdalServiceWithConfig(configIndex: number) {\r\n    if (!this.isValidAdalConfigIndex(configIndex)) {\r\n      throw new Error('ConfigIndex out of bounds. Consider checking with the isValidAdalConfigIndex helper method before calling.');\r\n    }\r\n\r\n    console.debug(`Initialising adal4Service with config index: ` + configIndex);\r\n\r\n    const config = this.adalConfigs[configIndex];\r\n    console.debug(`Adal config: `);\r\n    console.debug('- tenant: ' + config.tenant);\r\n    console.debug('- clientId: ' + config.clientId);\r\n\r\n    this.adalService.init(this.adalConfigs[configIndex]);\r\n\r\n    console.debug('>>>>>>> Actual config after init:');\r\n    console.debug(this.adalService.config);\r\n  }\r\n\r\n  /**\r\n   * Each AD token contains its tenant. Given a token, the tenant can be\r\n   * extracted and passed into getConfigIndexByTenant which will return the\r\n   * config index for that tenant\r\n   */\r\n  public getConfigIndexByTenant(tenant: string) {\r\n    if (tenant === this.adalConfigs[0].tenant) {\r\n      return 0;\r\n    }\r\n\r\n    throw Error(`Unknown tenant passed in: ${tenant}`);\r\n  }\r\n\r\n  public handleWindowCallbackFromAzureLogin() {\r\n    this.adalService.handleWindowCallback();\r\n  }\r\n\r\n  public loginToAzure() {\r\n    // Whenever the user gets a new AAD token we clear any existing VIP token\r\n    // TODO: Why do we need to clear the VIP token, does this really make sense?\r\n    this.storage.clearVipToken();\r\n    this.storage.clearTransactionId();\r\n\r\n    this.adalService.login();\r\n  }\r\n\r\n  public logoutOfAzure() {\r\n    // Delete the user's Azure instance selection when they logout\r\n    this.storage.clearAzureInstance();\r\n\r\n    this.adalService.logOut();\r\n  }\r\n\r\n  public retrieveAadToken(): string {\r\n    return this.adalService.userInfo.token;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { AadService } from '../../services/aad.service';\r\nimport { StorageService } from '../../services/storage.service';\r\n\r\n@Component({\r\n  selector: 'lib-azure-login',\r\n  templateUrl: './azure-login.component.html',\r\n  styleUrls: ['./azure-login.component.css', '../../main.css']\r\n})\r\nexport class AzureLoginComponent implements OnInit {\r\n\r\n  public readonly azureInstanceAD = 'NSW Health Employee';\r\n\r\n  constructor(\r\n    private aadService: AadService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private storage: StorageService\r\n  ) { }\r\n\r\n  private async handleLoginRouting() {\r\n    const routeParams = this.activatedRoute.snapshot.params.tenantConfigId as number | null;\r\n\r\n    // If we're returning from a login, initialise ADAL with the supplied config index\r\n    if (routeParams) {\r\n      this.aadService.initialiseAdalServiceWithConfig(routeParams);\r\n      this.aadService.handleWindowCallbackFromAzureLogin();\r\n\r\n      const lastLocation = this.storage.retrieveLastLocation();\r\n      this.storage.clearLastLocation();\r\n\r\n      if (lastLocation) {\r\n        // Use href to simplify the process of restoring and routing\r\n        // route parameters and query parameters\r\n        // When we return from a 401 back to a route that has query params\r\n        // e.g. the Diagnostic Report screen, we want those query params\r\n        // to be included\r\n        window.location.href = lastLocation;\r\n      } else {\r\n        await this.router.navigate(['']);\r\n      }\r\n    } else {\r\n      // there is only one login for this app, just pick it\r\n      this.selectAzureInstance(this.azureInstanceAD);\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    console.debug('LOGIN onInit');\r\n    await this.handleLoginRouting();\r\n  }\r\n\r\n  public selectAzureInstance(instance: string) {\r\n    console.debug('Selecting Azure instance: ' + instance);\r\n\r\n    // Whilst this is redundant (because we will only ever pass in `this.azureInstanceAD`)\r\n    // We want to keep the structure of the ADAL initialisation the same as the base PoC\r\n    // from when there were multiple ADs\r\n    if (instance === this.azureInstanceAD) {\r\n      this.aadService.initialiseAdalServiceWithConfig(AadService.AZURE_AD_INSTANCE);\r\n    }\r\n\r\n    // Log the user into the selected Azure instance\r\n    // When Azure responds, it will have the tenantConfig of 0 which will\r\n    // then route the user to their last window location in the constructor above.\r\n    this.aadService.loginToAzure();\r\n  }\r\n}\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <button color=\"accent\" mat-raised-button class=\"big\" (click)=\"selectAzureInstance(azureInstanceAD)\">\r\n    {{azureInstanceAD}}\r\n  </button>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AadService } from '../../services/aad.service';\r\n\r\n@Component({\r\n  template: '',\r\n  selector: 'lib-azure-logout'\r\n})\r\nexport class AzureLogoutComponent implements OnInit {\r\n  constructor(private aadService: AadService) { }\r\n\r\n  ngOnInit() {\r\n    this.aadService.logoutOfAzure();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'lib-contact-admin',\r\n  templateUrl: './contact-admin.component.html',\r\n  styleUrls: ['./contact-admin.component.scss', '../../main.css']\r\n})\r\nexport class ContactAdminComponent {\r\n\r\n  public readonly email: string = 'NSWPATH-TestCatalogue@health.nsw.gov.au';\r\n  public readonly subject: string = 'Requesting Access to the Statewide Test Catalogue';\r\n  public readonly href: string = `mailto:${this.email}?subject=${this.subject}`;\r\n  constructor(private readonly router: Router) { }\r\n\r\n  public async redirect() {\r\n    await this.router.navigate(['authentication/login']);\r\n  }\r\n}\r\n","<div class=\"container h-50\">\r\n  <div class=\"row align-items-center h-100\">\r\n    <div class=\"col-10 mx-auto\">\r\n      <div class=\"jumbotron\">\r\n        <h1 class=\"display-4\">Access Denied</h1>\r\n        <hr class=\"my-4\">\r\n        <p class=\"lead\">\r\n          Unfortunately, If you have reached this page after logging in, it means you do not have the required\r\n          permissions to proceed. Please contact us at (<a rel=\"noopener noreferrer\" href=\"{{href}}\">{{email}}</a>) to\r\n          request access. We apologize for any inconvenience.\r\n        </p>\r\n        <button mat-raised-button color=\"primary\" (click)=\"redirect()\">Return to login</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\n\r\n// Semantics Device Fingerprint library\r\ndeclare var IaDfp: any;\r\n\r\n@Injectable()\r\nexport class IaDfpService {\r\n  public readonly IaDfp = IaDfp;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EMPTY, Observable, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { IMfaMessage } from '../model/mfaMessage';\r\nimport { NswhpAuthService } from '../nswhpauth.service';\r\nimport { IaDfpService } from './iadfp.service';\r\nimport { StorageService } from './storage.service';\r\n\r\n// Semantics Device Fingerprint library\r\n@Injectable()\r\nexport class VipService {\r\n  private pushUrl: string;\r\n  private otpUrl: string;\r\n  private sendOtpUrl: string;\r\n  private registerUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private storage: StorageService,\r\n    private iaDfpService: IaDfpService,\r\n    private nswhpAuthService: NswhpAuthService\r\n  ) {\r\n    this.pushUrl = this.nswhpAuthService.nswhpAuthOptions.adal.pushUrl;\r\n    this.otpUrl = this.nswhpAuthService.nswhpAuthOptions.adal.otpUrl;\r\n    this.sendOtpUrl = this.nswhpAuthService.nswhpAuthOptions.adal.sendOtpUrl;\r\n    this.registerUrl = this.nswhpAuthService.nswhpAuthOptions.adal.registerUrl;\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                                 PUSH                                  *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // Wait for user to accept push notification\r\n  public pollUsersPushResponse(): Observable<IMfaMessage> {\r\n    console.debug('Authenticating user with PUSH...');\r\n\r\n    const body = JSON.stringify({ transactionId: this.storage.retrieveTransactionId() });\r\n    console.debug('TRANSACTION ID = ' + this.storage.retrieveTransactionId());\r\n\r\n    return this.http.post<IMfaMessage>(this.pushUrl, body)\r\n      .pipe(map(res => this.extractData(res)))\r\n      .pipe(catchError(this.handleError.bind(this)));\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                                 OTP                                   *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // Send otp code for authentication\r\n  public authenticateOtpCode(otpCode: string): Observable<IMfaMessage> {\r\n    console.debug('Authenticating user with OTP...');\r\n\r\n    const newDeviceFingerprint = this.getDeviceFingerprint();\r\n    const body = {\r\n      deviceFingerprint: newDeviceFingerprint,\r\n      otp: otpCode\r\n    };\r\n\r\n    return this.http.post<IMfaMessage>(this.otpUrl, body)\r\n      .pipe(map(res => this.extractData(res)))\r\n      .pipe(catchError(this.handleError.bind(this)));\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                            REGISTRATION                               *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // Send the user a SMS OTP code for registration\r\n  public sendOtpForRegistration() {\r\n    console.debug('Creating VIP Account and sending user SMS OTP code...');\r\n\r\n    const newDeviceFingerprint = this.getDeviceFingerprint();\r\n    const body = {\r\n      deviceFingerprint: newDeviceFingerprint\r\n    };\r\n\r\n    return this.http.post<IMfaMessage>(this.sendOtpUrl, body)\r\n      .pipe(map(res => this.extractData(res)))\r\n      .pipe(catchError(this.handleError.bind(this)));\r\n  }\r\n\r\n  // Send user information for VIP registration\r\n  public submitVipRegistration(newCredentialId: string, newOtp1: string, newOtp2: string, newTempOtp: string) {\r\n    console.debug('Submitting user\\'s VIP registration...');\r\n\r\n    const newDeviceFingerprint = this.getDeviceFingerprint();\r\n    const body = {\r\n      deviceFingerprint: newDeviceFingerprint,\r\n      credentialId: newCredentialId,\r\n      otp1: newOtp1,\r\n      otp2: newOtp2,\r\n      tempOtp: newTempOtp\r\n    };\r\n\r\n    console.debug('Device fingerprint: ' + newDeviceFingerprint);\r\n    console.debug('Credential ID: ' + newCredentialId);\r\n    console.debug('First security code: ' + newOtp1);\r\n    console.debug('Second security code: ' + newOtp2);\r\n    console.debug('SMS Code: ' + newTempOtp);\r\n\r\n    return this.http.post<IMfaMessage>(this.registerUrl, body)\r\n      .pipe(\r\n        tap(res => this.extractData(res),\r\n          catchError(this.handleError.bind(this)))\r\n      );\r\n  }\r\n\r\n  // Return to the last location the user made a http request and got a 401\r\n  public redirectToLastLocation() {\r\n    console.debug('### VIP SERVICE: redirectToLastLocation');\r\n    const lastLocation = this.storage.retrieveLastLocation();\r\n    this.storage.clearLastLocation();\r\n    if (lastLocation) {\r\n      console.debug('### We HAVE just returned from handling a 401 error. Redirecting to... ' + lastLocation);\r\n\r\n      this.storage.clearLastLocation();\r\n      // Use hreft to simplify the process of restoring and routing\r\n      // route parameters and query parameters\r\n      window.location.href = lastLocation;\r\n    } else {\r\n      console.debug('### We have NOT returned from handling a 401 error');\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  private getDeviceFingerprint() {\r\n    return this.iaDfpService.IaDfp.readFingerprint();\r\n  }\r\n\r\n  private extractData(res: IMfaMessage) {\r\n    console.debug('>>> VIP SERVICE: ');\r\n    console.debug(res);\r\n\r\n    // Store the Vip token if returned here so the components don't have to think about it\r\n    if (res.vipToken) {\r\n      this.storage.storeVipToken(res.vipToken);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * If the error is a 403 navigate to the Contact Admin page, otherwise bubble\r\n   * the error up\r\n   */\r\n  private async handleError(error: HttpErrorResponse) {\r\n    // 403 Forbidden - Require Admin\r\n    if (error.status === 403) {\r\n      await this.handleContactAdmin(error);\r\n      return EMPTY;\r\n    } else {\r\n      return throwError(error);\r\n    }\r\n  }\r\n\r\n  private async handleContactAdmin(error: HttpErrorResponse) {\r\n    console.debug('Handling Operation Not Allowed');\r\n    console.debug('User is unable to continue authorization process.');\r\n    console.debug(error.error.detailMessage);\r\n    console.debug('Redirecting user to contact admin page...');\r\n\r\n    // To be implemented under DT-1138\r\n    await this.router.navigate(['/authentication/contact-admin/' + error.error.requestId]);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-tick',\r\n  templateUrl: './tick.component.html',\r\n  styleUrls: ['./tick.component.css']\r\n})\r\nexport class TickComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"checkmark\">\r\n  <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\r\n    y=\"0px\" viewBox=\"0 0 161.2 161.2\" enable-background=\"new 0 0 161.2 161.2\" xml:space=\"preserve\">\r\n    <path class=\"path\" fill=\"none\" stroke=\"#7DB0D5\" stroke-miterlimit=\"10\" d=\"M425.9,52.1L425.9,52.1c-2.2-2.6-6-2.6-8.3-0.1l-42.7,46.2l-14.3-16.4\r\n\tc-2.3-2.7-6.2-2.7-8.6-0.1c-1.9,2.1-2,5.6-0.1,7.7l17.6,20.3c0.2,0.3,0.4,0.6,0.6,0.9c1.8,2,4.4,2.5,6.6,1.4c0.7-0.3,1.4-0.8,2-1.5\r\n\tc0.3-0.3,0.5-0.6,0.7-0.9l46.3-50.1C427.7,57.5,427.7,54.2,425.9,52.1z\" />\r\n    <circle class=\"path\" fill=\"none\" stroke=\"rgba(155, 255, 177, 1)\" stroke-width=\"4\" stroke-miterlimit=\"10\" cx=\"80.6\"\r\n      cy=\"80.6\" r=\"62.1\" />\r\n    <polyline class=\"path\" fill=\"none\" stroke=\"rgba(155, 255, 177, 1)\" stroke-width=\"6\" stroke-linecap=\"round\"\r\n      stroke-miterlimit=\"10\" points=\"113,52.8\r\n\t74.1,108.4 48.2,86.4 \" />\r\n\r\n    <circle class=\"spin\" fill=\"none\" stroke=\"rgba(155, 255, 177, 1)\" stroke-width=\"4\" stroke-miterlimit=\"10\"\r\n      stroke-dasharray=\"12.2175,12.2175\" cx=\"80.6\" cy=\"80.6\" r=\"73.9\" />\r\n\r\n  </svg>\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <div *ngIf=\"!authenticated\">\r\n    <h2>Please enter your Security Code below and press Submit</h2>\r\n    <h3>You can find your Security Code in your VIP Access mobile app or desktop app</h3>\r\n    <p *ngIf=\"failed\" class=\"invalid-input-message\">Failed to authenticate OTP, please try again.</p>\r\n    <form (submit)=\"onSubmit(otpCode.value)\">\r\n      <div class=\"container-body\">\r\n        <mat-form-field class=\"search-form-field\">\r\n          <input #otpCode matFormFieldControl matInput type=\"text\" placeholder=\"SECURITY CODE\" required\r\n            [ngClass]=\"{ 'invalid-input' : failed }\" (keypress)=\"enteringOtp()\" />\r\n\r\n        </mat-form-field>\r\n\r\n        <div class=\"container-button\">\r\n          <button mat-button matSuffix color=\"accent\" mat-raised-button id=\"submit\" type=\"submit\">\r\n            {{submitButtonText}}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div *ngIf=\"authenticated\">\r\n    <h1>Success!</h1>\r\n    <lib-tick></lib-tick>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { VipService } from '../../services/vip.service';\r\nimport { IMfaMessage } from '../../model/mfaMessage';\r\n\r\n@Component({\r\n  selector: 'lib-otp',\r\n  templateUrl: './otp.component.html',\r\n  styleUrls: ['./otp.component.scss', '../../main.css']\r\n})\r\nexport class OtpComponent implements OnInit {\r\n\r\n  submitted = false;\r\n  authenticated = false;\r\n  failed = false;\r\n\r\n  submitButtonText = 'Submit';\r\n\r\n  constructor(\r\n    private vipService: VipService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit(code: string): false {\r\n\r\n    if (!this.submitted) {\r\n      this.submitted = true;\r\n      this.submitButtonText = 'Submitting...';\r\n\r\n      this.vipService.authenticateOtpCode(code).subscribe(\r\n        response => { this.handleSuccessfulOtpAuthentication(response); },\r\n        () => { this.handleFailedOtpAuthentication(); }\r\n      );\r\n    }\r\n\r\n    return false; // Don't cause a reload\r\n  }\r\n\r\n  private handleSuccessfulOtpAuthentication(response: IMfaMessage) {\r\n    console.debug(response);\r\n\r\n    this.authenticated = true;\r\n    this.failed = false;\r\n\r\n    // NOTE: VipService intercepts the response and stores the Vip token\r\n\r\n    this.vipService.redirectToLastLocation();\r\n  }\r\n\r\n  private handleFailedOtpAuthentication() {\r\n    this.submitted = false;\r\n    this.failed = true;\r\n    this.submitButtonText = 'Try Again';\r\n  }\r\n\r\n  // Turn the input green again when the user starts changing the otp code\r\n  public enteringOtp() {\r\n    this.failed = false;\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.css']\r\n})\r\nexport class SpinnerComponent {\r\n  isDelayedRunning = false;\r\n\r\n  constructor() { }\r\n\r\n  @Input()\r\n  public set isRunning(value: boolean) {\r\n    this.isDelayedRunning = value;\r\n  }\r\n}\r\n","<div [hidden]=\"!isDelayedRunning\" class=\"spinner\">\r\n  <div class=\"double-bounce1\"></div>\r\n  <div class=\"double-bounce2\"></div>\r\n</div>\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <div *ngIf=\"waiting\">\r\n    <h2>A push notification has been sent to your mobile device.</h2>\r\n    <h3>Waiting for Sign in Request to be approved...</h3>\r\n    <lib-spinner [isRunning]=\"waiting\"></lib-spinner>\r\n    <h3>Please do not refresh this page</h3>\r\n    <button mat-button mat-raised-button color=\"primary\" (click)=\"useOTP()\">Use OTP Instead</button>\r\n  </div>\r\n  <div *ngIf=\"!waiting\">\r\n    <h1>{{statusMessage}}</h1>\r\n    <h2>{{detailMessage}}</h2>\r\n    <div *ngIf=\"success\">\r\n      <lib-tick></lib-tick>\r\n    </div>\r\n    <div *ngIf=\"!success\">\r\n      <button mat-button mat-raised-button color=\"primary\" (click)=\"useOTP()\">Use OTP Instead</button>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { IMfaMessageErrorMessage } from '../../model/mfaErrorMessage';\r\nimport { IMfaMessage } from '../../model/mfaMessage';\r\nimport { VipService } from '../../services/vip.service';\r\n\r\n@Component({\r\n  selector: 'lib-push',\r\n  templateUrl: './push.component.html',\r\n  styleUrls: ['./push.component.scss', '../../main.css']\r\n})\r\nexport class PushComponent implements OnInit {\r\n\r\n  waiting: boolean;\r\n  public success: boolean;\r\n\r\n  public statusMessage = '';\r\n  public detailMessage = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private vipService: VipService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // Call API and wait for response\r\n    this.waiting = true;\r\n\r\n    this.vipService.pollUsersPushResponse().subscribe(\r\n      response => {\r\n        this.handleSuccessfulPush(response);\r\n      },\r\n      error => {\r\n        this.handleFailedPush(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private handleSuccessfulPush(response: IMfaMessage) {\r\n    console.debug('SUCCESS: User accepted push notification');\r\n    console.debug('vipToken: ' + response.vipToken);\r\n    console.debug(response);\r\n\r\n    // Hide the waiting screen and show success!\r\n    this.waiting = false;\r\n    this.success = true;\r\n\r\n    this.statusMessage = response.statusMessage;\r\n    this.detailMessage = response.detailMessage;\r\n\r\n    // NOTE: VipService intercepts the response and stores the Vip token\r\n\r\n    this.vipService.redirectToLastLocation();\r\n  }\r\n\r\n  private handleFailedPush(error: HttpErrorResponse) {\r\n    console.debug('ERROR: Did not receive user\\'s push acceptance');\r\n    console.error(error);\r\n    console.error(error.error);\r\n\r\n    // Hide the waiting screen and show failure!\r\n    this.waiting = false;\r\n    this.success = false;\r\n\r\n    const err = error.error as IMfaMessageErrorMessage;\r\n\r\n    this.statusMessage = err.statusMessage;\r\n    this.detailMessage = err.detailMessage;\r\n  }\r\n\r\n\r\n  public async useOTP() {\r\n    console.debug('User has selected to use OTP instead of Push. Redirecting...');\r\n    await this.router.navigate(['authentication/otp']);\r\n  }\r\n}\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <h3 *ngIf=\"failed\">Failed Registration.<br>We have sent you a new SMS code. Please try again.</h3>\r\n\r\n  <div [ngClass]=\"{ 'hidden' : registered }\">\r\n    <p class=\"invalid-input-message\">{{invalidInputMessage}}</p>\r\n\r\n    <form autocomplete=\"off\" (submit)=\"onSubmit(credentialId.value, otp1.value, otp2.value, tempOtp.value)\">\r\n      <p>Download Symantec VIP Access for desktop or mobile\r\n        <a href=\"https://vip.symantec.com/\" target=\"_blank\" rel=\"external nofollow noopener\">here.</a>\r\n      </p>\r\n\r\n      <mat-form-field>\r\n        <input #credentialId matInput [value]=\"credentialIdValue\" name=\"credentialId\" type=\"text\" required\r\n          placeholder=\"Enter VIP Credential ID\" [ngClass]=\"{ 'invalid-input' : !validInputs[0] }\" id=\"0\"\r\n          (change)=\"validateInput(credentialId)\">\r\n      </mat-form-field>\r\n\r\n      <p>Please enter two <u>sequential</u> security codes</p>\r\n      <mat-form-field>\r\n        <input #otp1 matInput required [value]=\"otp1Value\" type=\"text\" placeholder=\"FIRST SECURITY CODE\"\r\n          [ngClass]=\"{ 'invalid-input' : !validInputs[1] }\" id=\"1\" (change)=\"validateInput(otp1)\">\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input #otp2 matInput required [value]=\"otp2Value\" type=\"text\" placeholder=\"SECOND SECURITY CODE\"\r\n          [ngClass]=\"{ 'invalid-input' : !validInputs[2] }\" id=\"2\" (change)=\"validateInput(otp2)\">\r\n      </mat-form-field>\r\n\r\n      <div *ngIf=\"!smsCodeSent\">\r\n        <p>Sending SMS code to your mobile device...</p>\r\n        <mat-chip-list>\r\n          <mat-chip selectable=false>Waiting for SMS code...</mat-chip>\r\n        </mat-chip-list>\r\n      </div>\r\n\r\n      <p *ngIf=\"smsCodeSent\">SMS Code has been sent to +{{mobileNumber}}</p>\r\n      <mat-form-field>\r\n        <input #tempOtp matInput required [value]=\"tempOtpValue\" type=\"text\" placeholder=\"SMS CODE\"\r\n          [ngClass]=\"{ 'invalid-input' : !validInputs[3], 'hidden' : !smsCodeSent }\" id=\"3\"\r\n          (change)=\"validateInput(tempOtp)\">\r\n      </mat-form-field>\r\n\r\n      <button mat-button mat-raised-button color=\"primary\" id=\"submit\" type=\"submit\"\r\n        [ngClass]=\"{ 'hidden' : !smsCodeSent }\">{{submitButtonText}}</button>\r\n    </form>\r\n  </div>\r\n\r\n  <div [ngClass]=\"{ 'hidden' : !registered }\">\r\n    <h3>{{statusMessage}}</h3>\r\n    <lib-tick></lib-tick>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { IMfaMessage } from '../../model/mfaMessage';\r\nimport { VipHttpErrorResonse } from '../../model/vipHttpErrorResponse';\r\nimport { VipService } from '../../services/vip.service';\r\n\r\n@Component({\r\n  selector: 'lib-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss', '../../main.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  smsCodeSent = false;\r\n  registered = false;\r\n  failed = false;\r\n\r\n  statusMessage = '';\r\n  submitButtonText = 'Register';\r\n\r\n  mobileNumber = '';\r\n  invalidInputMessage = '';\r\n\r\n  // Input values\r\n  credentialIdValue = '';\r\n  otp1Value = '';\r\n  otp2Value = '';\r\n  tempOtpValue = '';\r\n\r\n  // Store the valid flag for each input in the form\r\n  validInputs = [true, true, true, true];\r\n  CREDENTIAL_ID = 0;\r\n  OTP_1 = 1;\r\n  OTP_2 = 2;\r\n  TEMP_OTP = 3;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private vipService: VipService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // Send SMS OTP code for registration\r\n    this.initiateRegistrationProcess();\r\n  }\r\n\r\n  private initiateRegistrationProcess() {\r\n    this.smsCodeSent = false;\r\n    this.validInputs = [true, true, true, true];\r\n\r\n    this.vipService.sendOtpForRegistration().subscribe(\r\n      response => {\r\n        console.debug(response);\r\n        this.smsCodeSent = true;\r\n        this.mobileNumber = response.mobileNumber;\r\n      },\r\n      async error => {\r\n        console.debug('Error sending SMS code to user for registration...');\r\n        console.debug(error);\r\n\r\n        // TODO: Do we want to handle better\r\n        // We need to pass in the request id to the page\r\n        await this.router.navigate(['/authentication/contact-admin']);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(credentialId: string, otp1: string, otp2: string, tempOtp: string): false {\r\n\r\n    if (this.allInputsValid(credentialId, otp1, otp2, tempOtp)) {\r\n      this.submitButtonText = 'Registering...';\r\n      this.vipService.submitVipRegistration(credentialId, otp1, otp2, tempOtp).subscribe(\r\n        response => { this.handleSuccessfulRegistration(response); },\r\n        error => { this.handleFailedRegistration(error); }\r\n      );\r\n    }\r\n\r\n    return false; // Don't cause a reload\r\n  }\r\n\r\n  handleSuccessfulRegistration(response: IMfaMessage) {\r\n    console.debug('SUCCESS: User registered with VIP');\r\n    console.debug('vipToken: ' + response.vipToken);\r\n    console.debug(response);\r\n\r\n    // Notify the user of successful registration and show home button\r\n    this.registered = true;\r\n    this.failed = false;\r\n    this.statusMessage = response.statusMessage;\r\n\r\n    // NOTE: VipService intercepts the response and stores the Vip token\r\n    this.vipService.redirectToLastLocation();\r\n  }\r\n\r\n  // If registration fails for any reason (we assume all inputs passed validation - even though current validation is minimal)\r\n  // we will send a new SMS code and clear all inputs so user can begin registration process again\r\n  private handleFailedRegistration(error: VipHttpErrorResonse) {\r\n    console.debug('ERROR: Failed to register user with VIP');\r\n    console.debug(error);\r\n\r\n    this.failed = true;\r\n\r\n    // Clear all inputs\r\n    this.credentialIdValue = null;\r\n    this.otp1Value = null;\r\n    this.otp2Value = null;\r\n    this.tempOtpValue = null;\r\n\r\n    // Tell user to try again with new SMS code\r\n    this.submitButtonText = 'Try Again';\r\n\r\n    this.initiateRegistrationProcess();\r\n  }\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  validateInput(input: HTMLInputElement) {\r\n    console.debug(input);\r\n\r\n    // Assume valid\r\n    this.validInputs[parseInt(input.id, 10)] = true;\r\n    this.invalidInputMessage = '';\r\n\r\n    // No whitespace\r\n    if (/\\s/.test(input.value)) {\r\n      this.validInputs[parseInt(input.id, 10)] = false;\r\n      this.invalidInputMessage = 'Input must not contain spaces';\r\n    }\r\n\r\n    // Only numbers in OTPs\r\n    if (input.id === this.OTP_1.toString() || input.id === this.OTP_2.toString() || input.id === this.TEMP_OTP.toString()) {\r\n      const nums = /^[0-9]*$/;\r\n      if (!input.value.match(nums)) {\r\n        this.validInputs[parseInt(input.id, 10)] = false;\r\n        this.invalidInputMessage = 'Codes may only contains numbers';\r\n      }\r\n    }\r\n\r\n    console.debug(this.validInputs);\r\n  }\r\n\r\n  private allInputsValid(credentialId: string, otp1: string, otp2: string, tempOtp: string): boolean {\r\n\r\n    // Ensure all inputs have been entered\r\n    if (tempOtp.length <= 0) {\r\n      this.validInputs[this.TEMP_OTP] = false;\r\n    }\r\n    if (otp2.length <= 0) {\r\n      this.validInputs[this.OTP_2] = false;\r\n    }\r\n    if (otp1.length <= 0) {\r\n      this.validInputs[this.OTP_1] = false;\r\n    }\r\n    if (credentialId.length <= 0) {\r\n      this.validInputs[this.CREDENTIAL_ID] = false;\r\n    }\r\n\r\n    if (this.validInputs.includes(false)) {\r\n      this.invalidInputMessage = 'Please fill in all fields';\r\n      return false;\r\n    } else {\r\n      this.invalidInputMessage = '';\r\n      return true;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpHeaders,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport { EMPTY, Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { IMfaMessage } from '../model/mfaMessage';\r\nimport { VipHttpErrorResonse } from '../model/vipHttpErrorResponse';\r\nimport { NswhpAuthService } from '../nswhpauth.service';\r\nimport { AadService } from './aad.service';\r\nimport { IaDfpService } from './iadfp.service';\r\nimport { StorageService } from './storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationInterceptorService implements HttpInterceptor {\r\n  private AAD_TOKEN_HEADER = 'AuthorizationAD';\r\n  private VIP_TOKEN_HEADER = 'AuthorizationVIP';\r\n  private domain: string;\r\n  private stepUpPath: string;\r\n  constructor(\r\n    private aadService: AadService,\r\n    private storageService: StorageService,\r\n    private router: Router,\r\n    private http: HttpClient,\r\n    private iaDfpService: IaDfpService,\r\n    private nswhpAuthService: NswhpAuthService\r\n  ) {\r\n    this.domain = this.nswhpAuthService.nswhpAuthOptions.vip.domain;\r\n    this.stepUpPath = this.nswhpAuthService.nswhpAuthOptions.vip.stepUpPath;\r\n  }\r\n\r\n  intercept(request: HttpRequest<HttpAuthRequest>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    request = this.addAuthHeaders(request);\r\n\r\n    return next.handle(request).pipe(\r\n      catchError(this.handleError.bind(this))\r\n    );\r\n  }\r\n\r\n  public addAuthHeaders(request: HttpRequest<HttpAuthRequest>) {\r\n    const headers: {\r\n      [index: string]: string\r\n    } = {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, DELETE',\r\n      'Access-Control-Max-Age': '3600',\r\n      'Access-Control-Allow-Headers': 'x-requested-with'\r\n    };\r\n\r\n    // These have been added separately since string interpolation is not supported for object keys\r\n    const aadToken = this.aadService.retrieveAadToken();\r\n    if (aadToken) {\r\n      headers[this.AAD_TOKEN_HEADER] = aadToken;\r\n    }\r\n\r\n    const vipToken = this.storageService.retrieveVipToken();\r\n    if (vipToken) {\r\n      headers[this.VIP_TOKEN_HEADER] = (vipToken as string);\r\n    }\r\n\r\n    request = request.clone({\r\n      setHeaders: headers\r\n    });\r\n\r\n    return request;\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                    USER AUTHORIZATION LOGIC [401]                     *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // If the user is unable to reach the API endpoint we must ensure they are authenticated.\r\n  // The user is first authenticated with Azure AD\r\n  //     - If the user does not have a valid AAD token we redirect them to login to Azure AD\r\n  // The user is then required to have a VIP token\r\n  //     - The '/stepup' endpoint must be called and then the following may happen:\r\n  //         + If the user is not risky then we are immediately provided with the VIP token\r\n  //         + If the user is risky then they are redirect to the provided MFA medium (push or otp)\r\n  //             = NOTE: If the user is redirect to push or otp they will be redirected\r\n  //                     back home once they have a valid VIP token\r\n  private async handleUserAuthorization(error: HttpErrorResponse) {\r\n    // Store the user context so we can return here after handling the 401\r\n    this.storageService.storeLastLocation();\r\n\r\n    // Check if the user is authenticated with Azure:\r\n    //      If they are, we have a valid AAD Token and we can continue.\r\n    //      If they are not, we redirect them to the Azure login page and leave\r\n    //       them there until they successfully login. They will then be redirected to the home page\r\n    if (this.isNewAadTokenRequired(error)) {\r\n      await this.router.navigate(['authentication/login']);\r\n    } else {\r\n      this.getVipToken();\r\n    }\r\n  }\r\n\r\n  private async handleError(error: HttpErrorResponse) {\r\n    // Handle Unauthorized error globally\r\n    // AuthService will handle other 400 errors\r\n    switch (error.status) {\r\n      case HttpStatus.UNAUTHORIZED:\r\n        console.debug('401 received, redirecting to login');\r\n        await this.handleUserAuthorization(error);\r\n        break;\r\n      case HttpStatus.FORBIDDEN:\r\n        console.debug('403 received in AuthenticationInterceptor, redirecting to contact admin');\r\n        await this.router.navigate(['/authentication/contact-admin']);\r\n        return EMPTY;\r\n      default:\r\n        return throwError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the error contains 'VIP' then we assume the AAD token is being successfully used\r\n   * and that the 401 is caused by a missing or invalid VIP token\r\n   * @param HttpErrorResponse returned by the call\r\n   */\r\n  private isNewAadTokenRequired(error: HttpErrorResponse) {\r\n    let required = true;\r\n    const re = /(vip|VIP)/;\r\n    if (error.error.message.search(re) !== -1) {\r\n      required = false;\r\n    }\r\n\r\n    return required;\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                             VIP TOKEN                                 *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  /**\r\n   * Initiates the steps to retrieve a VIP token from the server\r\n   */\r\n  private getVipToken() {\r\n    console.debug('Requesting new VIP Token...');\r\n\r\n    this.stepUpAuthentication().subscribe(\r\n      async response => {\r\n        this.logStepUpResponse(response);\r\n        await this.handleStepUpAuthentication(response);\r\n      },\r\n      async error => {\r\n        // NOTE: We specifically handle 403 and 404 errors here\r\n        // Only 401 is handled globally. Other Auth related http calls\r\n        // are made in AuthService that handles the other 400 errors.\r\n\r\n        // Forbidden - Contact an admin (requestId)\r\n        if (error.status === HttpStatus.FORBIDDEN) {\r\n          console.error('403 received');\r\n          // TODO: This\r\n          await this.handleContactAdmin(error);\r\n          return EMPTY;\r\n        } else if (error.status === HttpStatus.NOT_FOUND) {\r\n          console.error('404 received');\r\n          await this.handleRegistration(error);\r\n          return EMPTY;\r\n        } else {\r\n          await this.handleError(error);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private stepUpAuthentication(): Observable<HttpResponse<IMfaMessage>> {\r\n    console.debug('User required to step up authentication: ');\r\n\r\n    // We can assume that if we are requesting a VIP token we already have a valid AAD Token\r\n    const authorization = this.aadService.retrieveAadToken();\r\n    const newHeaders = new HttpHeaders().set(this.AAD_TOKEN_HEADER, authorization);\r\n\r\n    const options = {\r\n      headers: newHeaders,\r\n      observe: 'response' as 'body'\r\n    };\r\n\r\n    const newDeviceFingerprint = this.iaDfpService.IaDfp.readFingerprint();\r\n\r\n    const json = {\r\n      deviceFingerprint: newDeviceFingerprint\r\n    };\r\n    const body = JSON.stringify(json);\r\n    const url = this.domain + this.stepUpPath;\r\n\r\n    console.debug('Sending request: ');\r\n    console.debug('- url: ' + url);\r\n    console.debug('- authorization: ' + authorization);\r\n    console.debug('- body: ' + body);\r\n\r\n    return this.http.post<any>(url, body, options);\r\n  }\r\n\r\n  private async handleStepUpAuthentication(response: HttpResponse<IMfaMessage>) {\r\n    const res = response.body;\r\n    console.debug(response);\r\n    console.debug(res);\r\n\r\n    // Store transactionId\r\n    this.storageService.storeTransactionId(res.transactionId);\r\n\r\n    // If the user is not risky we can immediately return the provided VIP Token\r\n    // TODO: remove risky from response\r\n    if (res.risky) {\r\n      console.debug('User is required to use Multi-Factor Authentication');\r\n      console.debug(`Redirecting user to ${res.medium} page...`);\r\n\r\n      // Wait for the user to press the next button before routing to mfa page\r\n      await this.router.navigate([`/authentication/${res.medium.toString().toLowerCase()}`]);\r\n    } else {\r\n\r\n      // Store the token locally\r\n      this.storageService.storeVipToken(res.vipToken);\r\n\r\n      location.reload();\r\n    }\r\n  }\r\n\r\n  private logStepUpResponse(response: HttpResponse<IMfaMessage>) {\r\n    console.debug(response);\r\n    console.debug('\\'risky\\': ' + response.body.risky);\r\n    console.debug('\\'requestId\\': ' + response.body.requestId);\r\n    console.debug('\\'medium\\': ' + response.body.medium);\r\n    console.debug('\\'transactionId\\': ' + response.body.transactionId);\r\n    console.debug('\\'vipToken\\': ' + response.body.vipToken);\r\n  }\r\n\r\n  //  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //      *                        INTERCEPT REQUEST HEADERS                      *\r\n  //      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //     // Custom headers with AAD and VIP authorization tokens\r\n  //     getRequestOptionArgs(options?: RequestOptionsArgs): RequestOptionsArgs {\r\n  //       if (options == null) {\r\n  //           options = new RequestOptions();\r\n  //       }\r\n  //       if (options.headers == null) {\r\n  //           options.headers = new Headers();\r\n  //       }\r\n  //       options.headers.append('Content-Type', 'application/json');\r\n\r\n  //       // Default headers\r\n  //       options.headers.append('Access-Control-Allow-Origin', '*');\r\n  //       options.headers.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\r\n  //       options.headers.append('Access-Control-Max-Age', '3600');\r\n  //       options.headers.append('Access-Control-Allow-Headers', 'x-requested-with');\r\n\r\n  //       // NOTE: The error interceptor handles updating the authorization tokens when we get a 401\r\n\r\n  //       // AAD Token\r\n  //       const authorization = this.aadService.retrieveAadToken();\r\n  //       options.headers.append(this.AAD_TOKEN_HEADER, authorization);\r\n\r\n  //       // VIP Token\r\n  //       const authorizationVip = this.storage.retrieveVipToken();\r\n  //       options.headers.append(this.VIP_TOKEN_HEADER,  authorizationVip);\r\n\r\n  //       return options;\r\n  //   }\r\n\r\n\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                    USER AUTHORIZATION LOGIC [401]                     *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //    // If the user is unable to reach the API endpoint we must ensure they are authenticated.\r\n  //    // The user is first authenticated with Azure AD\r\n  //    //     - If the user does not have a valid AAD token we redirect them to login to Azure AD\r\n  //    // The user is then required to have a VIP token\r\n  //    //     - The '/stepup' endpoint must be called and then the following may happen:\r\n  //    //         + If the user is not risky then we are immediately provided with the VIP token\r\n  //    //         + If the user is risky then they are redirect to the provided MFA medium (push or otp)\r\n  //    //             = NOTE: If the user is redirect to push or otp they will be redirected\r\n  //    //                     back home once they have a valid VIP token\r\n  //    private handleUserAuthorization(error: Response) {\r\n  //        // Store the user context so we can return here after handling the 401\r\n  //        this.storage.storeLastLocation();\r\n\r\n  //        // Check if the user is authenticated with Azure:\r\n  //        //      If they are, we have a valid AAD Token and we can continue.\r\n  //        //      If they are not, we redirect them to the Azure login page and leave\r\n  //        //       them there until they successfully login. They will then be redirected to the home page\r\n  //        if (this.checkNewAadTokenIsRequired(error)) {\r\n  //            this.getAadToken();\r\n  //        } else {\r\n  //            this.getVipToken();\r\n  //        }\r\n  //    }\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                             AAD TOKEN                                 *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //   // If the 401 error response message contains 'VIP' then we know that the user\r\n  //   // either did not proved an AAD token or the provided AAD token is invalid.\r\n  //   // If the message does NOT contain 'VIP' then the provided AAD token was valid\r\n  //   // and we may simple return the currently stored AAD token.\r\n  //   private getAadToken() {\r\n  //       // If the user has selected an Azure instance then we can simply return\r\n  //       // their AAD token otherwise we redirect them to the /login page\r\n\r\n  //       // TODO: DH - Look into this, is there a missing line below? Code doesn't match the comments\r\n  //       if (this.storage.retrieveAzureInstance()) {\r\n  //           console.debug('User has already selected an Azure instance. Redirecting to Azure login page...');\r\n  //       } else {\r\n  //           console.debug('User has already NOT selected an Azure instance yet. Redirecting user to login page...');\r\n  //       }\r\n\r\n  //       // Always send the user to select an Azure instance to log in to.\r\n  //       // (even if they have previously selected an Azure instance)\r\n  //       this.router.navigate(['/authentication/login']);\r\n  //   }\r\n\r\n  //   // When the error message contains 'VIP' we know the AAD token was valid and we can just return it\r\n  //   private checkNewAadTokenIsRequired(error: Response) {\r\n  //       let required = true;\r\n  //       const re = /(vip|VIP)/;\r\n  //       if (error.json().message.search(re) !== -1) {\r\n  //           required = false;\r\n  //       }\r\n  //       return required;\r\n  //   }\r\n\r\n\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                       CONTACT ADMIN LOGIC [403]                       *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  private async handleContactAdmin(error: VipHttpErrorResonse) {\r\n    const body = error;\r\n\r\n    console.debug('Handling Operation Not Allowed');\r\n    console.debug('User is unable to continue authorization process.');\r\n    console.debug(body.error);\r\n    console.debug('Redirecting user to contact admin page...');\r\n\r\n    await this.router.navigate(['/authentication/contact-admin /' + body.requestId]);\r\n  }\r\n\r\n\r\n  //    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //     *                       REGISTRATION LOGIC [404]                        *\r\n  //     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  private async handleRegistration(error: VipHttpErrorResonse) {\r\n    const body = error;\r\n\r\n    console.debug('Handling Registration');\r\n\r\n    console.debug('User has not yet registered with VIP');\r\n    console.debug(body.error);\r\n    console.debug('Redirecting user to registration page...');\r\n\r\n    await this.router.navigate(['/authentication/register']);\r\n  }\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                    OVERRIDE DEFAULT HTTP METHODS                      *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //   request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       return super.request(url, options);\r\n  //   }\r\n\r\n  //   get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       console.debug('Intercepted GET Request:');\r\n  //       console.debug('- url: ' + url);\r\n  //       return this.intercept(super.get(url, this.getRequestOptionArgs(options)));\r\n  //   }\r\n\r\n  //   post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       console.debug('Intercepted POST Request:');\r\n  //       console.debug('- url: ' + url);\r\n  //       return this.intercept(super.post(url, body, this.getRequestOptionArgs(options)));\r\n  //   }\r\n\r\n  //   put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       return this.intercept(super.put(url, body, this.getRequestOptionArgs(options)));\r\n  //   }\r\n\r\n  //   delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       return this.intercept(super.delete(url, this.getRequestOptionArgs(options)));\r\n  //   }\r\n  // }\r\n\r\n}\r\nexport interface HttpAuthRequest {\r\n  [index: string]: string;\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NswhpAuthMaterialModule } from './authentication-material/nswhpauth-material.module';\nimport { AzureLoginComponent } from './components/azure-login/azure-login.component';\nimport { AzureLogoutComponent } from './components/azure-logout/azure-logout.component';\nimport { ContactAdminComponent } from './components/contact-admin/contact-admin.component';\nimport { OtpComponent } from './components/otp/otp.component';\nimport { PushComponent } from './components/push/push.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AadService } from './services/aad.service';\nimport { AuthenticationInterceptorService } from './services/AuthenticationInterceptor.service';\nimport { IaDfpService } from './services/iadfp.service';\nimport { StorageService } from './services/storage.service';\nimport { VipService } from './services/vip.service';\nimport { SpinnerComponent } from './components/spinner/spinner.component';\nimport { TickComponent } from './components/tick/tick.component';\nimport { INswhpAuthServiceOptions, NSWHP_AUTH_CONFIG } from './nswhpauth-config';\nimport { AdalService } from 'adal-angular4';\n\n\n\n@NgModule({\n  declarations: [\n    AzureLoginComponent,\n    AzureLogoutComponent,\n    OtpComponent,\n    PushComponent,\n    RegisterComponent,\n    SpinnerComponent,\n    TickComponent,\n    ContactAdminComponent,\n  ],\n  exports: [\n    AzureLoginComponent,\n    AzureLogoutComponent,\n    OtpComponent,\n    PushComponent,\n    RegisterComponent,\n    SpinnerComponent,\n    TickComponent,\n    ContactAdminComponent,\n  ],\n  imports: [\n    CommonModule,\n    NswhpAuthMaterialModule,\n  ],\n  providers: [\n    StorageService,\n    IaDfpService,\n    NswhpAuthMaterialModule,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthenticationInterceptorService,\n      multi: true\n    },\n    AadService,\n    VipService,\n    AdalService\n  ],\n  entryComponents: [\n    AzureLoginComponent,\n    AzureLogoutComponent,\n    OtpComponent,\n    PushComponent,\n    RegisterComponent,\n    SpinnerComponent,\n    TickComponent,\n    ContactAdminComponent,\n  ]\n})\nexport class NswhpAuthModule {\n  static forRoot(config: INswhpAuthServiceOptions): ModuleWithProviders<NswhpAuthModule> {\n    return {\n      ngModule: NswhpAuthModule,\n      providers: [\n        { provide: NSWHP_AUTH_CONFIG, useValue: config },\n      ]\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AzureLoginComponent } from './components/azure-login/azure-login.component';\r\nimport { AzureLogoutComponent } from './components/azure-logout/azure-logout.component';\r\nimport { ContactAdminComponent } from './components/contact-admin/contact-admin.component';\r\nimport { OtpComponent } from './components/otp/otp.component';\r\nimport { PushComponent } from './components/push/push.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'authentication/otp', component: OtpComponent },\r\n  { path: 'authentication/login', component: AzureLoginComponent },\r\n  { path: 'authentication/login/:tenantConfigId', component: AzureLoginComponent },\r\n  { path: 'authentication/logout', component: AzureLogoutComponent },\r\n  { path: 'authentication/register', component: RegisterComponent },\r\n  { path: 'authentication/push', component: PushComponent },\r\n  { path: 'authentication/contact-admin', component: ContactAdminComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NswhpAuthRoutingModule { }\r\n","/*\n * Public API Surface of nswhpauth\n */\n\nexport * from './lib/nswhpauth.service';\nexport * from './lib/nswhpauth.module';\nexport * from './lib/nswhpauth.routing.module';\nexport * from './lib/components';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵelement","i0.ɵɵpropertyInterpolate","i0.ɵɵtextInterpolate","i0.ɵɵnamespaceSVG","i0.ɵɵtemplate","i0.ɵɵproperty","HttpStatus.UNAUTHORIZED","HttpStatus.FORBIDDEN","HttpStatus.NOT_FOUND"],"mappings":"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"}