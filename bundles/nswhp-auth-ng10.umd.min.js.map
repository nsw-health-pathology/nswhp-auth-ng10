{"version":3,"sources":["../../../projects/nswhpauth/src/lib/nswhpauth-config.ts","../../../projects/nswhpauth/src/lib/nswhpauth.service.ts","../../../projects/nswhpauth/src/lib/authentication-material/nswhpauth-material.module.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/nswhpauth/src/lib/services/storage.service.ts","../../../projects/nswhpauth/src/lib/services/aad.service.ts","../../../projects/nswhpauth/src/lib/components/azure-login/azure-login.component.ts","../../../projects/nswhpauth/src/lib/components/azure-login/azure-login.component.html","../../../projects/nswhpauth/src/lib/components/azure-logout/azure-logout.component.ts","../../../projects/nswhpauth/src/lib/components/contact-admin/contact-admin.component.ts","../../../projects/nswhpauth/src/lib/components/contact-admin/contact-admin.component.html","../../../projects/nswhpauth/src/lib/services/iadfp.service.ts","../../../projects/nswhpauth/src/lib/services/vip.service.ts","../../../projects/nswhpauth/src/lib/components/tick/tick.component.ts","../../../projects/nswhpauth/src/lib/components/otp/otp.component.html","../../../projects/nswhpauth/src/lib/components/tick/tick.component.html","../../../projects/nswhpauth/src/lib/components/otp/otp.component.ts","../../../projects/nswhpauth/src/lib/components/spinner/spinner.component.ts","../../../projects/nswhpauth/src/lib/components/push/push.component.html","../../../projects/nswhpauth/src/lib/components/spinner/spinner.component.html","../../../projects/nswhpauth/src/lib/components/push/push.component.ts","../../../projects/nswhpauth/src/lib/components/register/register.component.html","../../../projects/nswhpauth/src/lib/components/register/register.component.ts","../../../projects/nswhpauth/src/lib/services/AuthenticationInterceptor.service.ts","../../../projects/nswhpauth/src/lib/nswhpauth.module.ts","../../../projects/nswhpauth/src/lib/nswhpauth.routing.module.ts"],"names":["NSWHP_AUTH_CONFIG","InjectionToken","options","this","nswhpAuthOptions","NswhpAuthService","i0","ɵɵinject","factory","ɵfac","providedIn","modules","MatButtonModule","MatCardModule","MatChipsModule","MatFormFieldModule","MatIconModule","MatInputModule","MatRadioModule","NswhpAuthMaterialModule","imports","exports","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","create","jwtDecode","jwtDecode_","StorageService","TRANSACTION_ID","VIP_TOKEN","AZURE_INSTANCE","LAST_LOCATION","prototype","storeVipToken","token","localStorage","setItem","retrieveVipToken","getItem","clearVipToken","removeItem","storeLastLocation","location","window","pathname","search","console","debug","retrieveLastLocation","clearLastLocation","storeTransactionId","retrieveTransactionId","clearTransactionId","storeAzureInstance","instance","toString","retrieveAzureInstance","parseInt","retrieveAzureTenantId","azureToken","clearAzureInstance","AadService","adalService","storage","nswhpAuthService","adalConfigs","adalConfig","isValidAdalConfigIndex","index","initialiseAdalServiceWithConfig","configIndex","Error","config","tenant","clientId","init","getConfigIndexByTenant","handleWindowCallbackFromAzureLogin","handleWindowCallback","loginToAzure","login","logoutOfAzure","logOut","retrieveAadToken","userInfo","AZURE_AD_INSTANCE","AZURE_B2C_INSTANCE","i1","AdalService","AzureLoginComponent","aadService","router","activatedRoute","azureInstanceAD","handleLoginRouting","routeParams","snapshot","params","tenantConfigId","lastLocation","href","navigate","_a","selectAzureInstance","ngOnInit","ɵɵdirectiveInject","i1$1","Router","ActivatedRoute","selectors","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","AzureLogoutComponent","encapsulation","ContactAdminComponent","email","subject","redirect","i0.ɵɵelement","i0.ɵɵpropertyInterpolate","i0.ɵɵtextInterpolate","IaDfpService","IaDfp","VipService","http","iaDfpService","pushUrl","adal","otpUrl","sendOtpUrl","registerUrl","pollUsersPushResponse","_this","JSON","stringify","transactionId","post","pipe","map","res","extractData","catchError","handleError","bind","authenticateOtpCode","otpCode","deviceFingerprint","getDeviceFingerprint","otp","sendOtpForRegistration","submitVipRegistration","newCredentialId","newOtp1","newOtp2","newTempOtp","newDeviceFingerprint","credentialId","otp1","otp2","tempOtp","tap","redirectToLastLocation","readFingerprint","vipToken","error","status","handleContactAdmin","EMPTY","throwError","detailMessage","requestId","i1$2","HttpClient","TickComponent","i0.ɵɵnamespaceSVG","i0.ɵɵtemplate","i0.ɵɵproperty","OtpComponent","vipService","submitted","authenticated","failed","submitButtonText","onSubmit","code","subscribe","response","handleSuccessfulOtpAuthentication","handleFailedOtpAuthentication","enteringOtp","SpinnerComponent","isDelayedRunning","defineProperty","inputs","isRunning","PushComponent","statusMessage","waiting","handleSuccessfulPush","handleFailedPush","success","err","useOTP","RegisterComponent","smsCodeSent","registered","mobileNumber","invalidInputMessage","credentialIdValue","otp1Value","otp2Value","tempOtpValue","validInputs","CREDENTIAL_ID","OTP_1","OTP_2","TEMP_OTP","initiateRegistrationProcess","allInputsValid","handleSuccessfulRegistration","handleFailedRegistration","validateInput","input","id","test","match","includes","_r1","_r2","_r3","_r6","ɵɵpureFunction1","_c1","ɵɵpureFunction2","_c2","AuthenticationInterceptorService","storageService","AAD_TOKEN_HEADER","VIP_TOKEN_HEADER","domain","vip","stepUpPath","intercept","request","addAuthHeaders","handle","headers","Content-Type","Access-Control-Allow-Origin","Access-Control-Allow-Methods","Access-Control-Max-Age","Access-Control-Allow-Headers","aadToken","clone","setHeaders","handleUserAuthorization","isNewAadTokenRequired","getVipToken","HttpStatus.UNAUTHORIZED","HttpStatus.FORBIDDEN","_b","required","message","stepUpAuthentication","logStepUpResponse","handleStepUpAuthentication","HttpStatus.NOT_FOUND","handleRegistration","authorization","HttpHeaders","set","observe","json","url","risky","medium","toLowerCase","reload","NswhpAuthModule","forRoot","ngModule","providers","provide","useValue","HTTP_INTERCEPTORS","useClass","multi","CommonModule","declarations","routes","path","component","NswhpAuthRoutingModule","RouterModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nexport interface INswhpAuthServiceOptions {\r\n  vip: {\r\n    stepUpPath: string,\r\n    domain: string\r\n  };\r\n  adalConfig: adal.Config[];\r\n  adal: {\r\n    pushUrl: string,\r\n    otpUrl: string,\r\n    sendOtpUrl: string,\r\n    registerUrl: string,\r\n  };\r\n}\r\nexport const NSWHP_AUTH_CONFIG = new InjectionToken<INswhpAuthServiceOptions>('NSWHP_AUTH_CONFIG');\r\n","import { Inject, Injectable } from '@angular/core';\nimport { INswhpAuthServiceOptions, NSWHP_AUTH_CONFIG } from './nswhpauth-config';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NswhpAuthService {\n  public nswhpAuthOptions: INswhpAuthServiceOptions;\n  constructor(\n    @Inject(NSWHP_AUTH_CONFIG) options: INswhpAuthServiceOptions,\n  ) {\n    this.nswhpAuthOptions = options;\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\nconst modules = [\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatChipsModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatRadioModule,\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    modules\r\n  ],\r\n  exports: [\r\n    modules\r\n  ]\r\n})\r\nexport class NswhpAuthMaterialModule { }\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as jwtDecode_ from 'jwt-decode';\r\n\r\nconst jwtDecode = jwtDecode_;\r\n@Injectable()\r\nexport class StorageService {\r\n\r\n  // Storage keys\r\n  private TRANSACTION_ID = 'TRANSACTION_ID';\r\n  private VIP_TOKEN = 'VIP_TOKEN';\r\n  private AZURE_INSTANCE = 'AZURE_INSTANCE';\r\n  private LAST_LOCATION = 'LAST_LOCATION';\r\n\r\n  constructor() { }\r\n\r\n  // VIP TOKEN\r\n  public storeVipToken(token: string) {\r\n    localStorage.setItem(this.VIP_TOKEN, token);\r\n  }\r\n  public retrieveVipToken() {\r\n    return localStorage.getItem(this.VIP_TOKEN);\r\n  }\r\n  public clearVipToken() {\r\n    localStorage.removeItem(this.VIP_TOKEN);\r\n  }\r\n\r\n  // LAST LAST_LOCATION\r\n  public storeLastLocation() {\r\n    const location = `${window.location.pathname}${window.location.search}`;\r\n    console.debug('### Storing last location:');\r\n    console.debug(window.location);\r\n    console.debug('### location = ' + location);\r\n    localStorage.setItem(this.LAST_LOCATION, location);\r\n  }\r\n  public retrieveLastLocation(): string {\r\n    console.debug(`### Retrieving last location: ${localStorage.getItem(this.LAST_LOCATION)}`);\r\n    return localStorage.getItem(this.LAST_LOCATION);\r\n  }\r\n  public clearLastLocation() {\r\n    console.debug('### Clearing the last location');\r\n    localStorage.removeItem(this.LAST_LOCATION);\r\n  }\r\n\r\n  // TRANSACTION ID\r\n  public storeTransactionId(token: string) {\r\n    localStorage.setItem(this.TRANSACTION_ID, token);\r\n  }\r\n\r\n  public retrieveTransactionId() {\r\n    return localStorage.getItem(this.TRANSACTION_ID);\r\n  }\r\n\r\n  public clearTransactionId() {\r\n    localStorage.removeItem(this.TRANSACTION_ID);\r\n  }\r\n\r\n  // AZURE INSTANCE\r\n  public storeAzureInstance(instance: number) {\r\n    localStorage.setItem(this.AZURE_INSTANCE, instance.toString());\r\n  }\r\n\r\n  public retrieveAzureInstance(): number {\r\n    return parseInt(localStorage.getItem(this.AZURE_INSTANCE), 10);\r\n  }\r\n\r\n  public retrieveAzureTenantId(): string {\r\n    const azureToken = localStorage.getItem('adal.idtoken');\r\n    if (azureToken) {\r\n      const decodedToken = jwtDecode(azureToken) as any;\r\n      // tslint:disable-next-line: no-string-literal\r\n      return decodedToken['tid'] as string;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public clearAzureInstance() {\r\n    localStorage.removeItem(this.AZURE_INSTANCE);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AdalService } from 'adal-angular4';\r\nimport { StorageService } from './storage.service';\r\nimport { NswhpAuthService } from '../nswhpauth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AadService {\r\n  static readonly AZURE_AD_INSTANCE = 0;\r\n  static readonly AZURE_B2C_INSTANCE = 1; // Not used because the app only supports Health AD Logins.\r\n\r\n  /** The index of the adalConfig to use set by clicking the login buttons or through the route parameter */\r\n  public configIndex: number;\r\n  // Adal configs\r\n  private adalConfigs: adal.Config[];\r\n\r\n  /** Takes an integer and returns true if it is in a valid range for the config array */\r\n  public isValidAdalConfigIndex(index: number) {\r\n    return index !== null && index >= 0 && index < this.adalConfigs.length;\r\n  }\r\n\r\n  constructor(\r\n    private adalService: AdalService,\r\n    private storage: StorageService,\r\n    private nswhpAuthService: NswhpAuthService\r\n  ) {\r\n    this.adalConfigs = this.nswhpAuthService.nswhpAuthOptions.adalConfig;\r\n  }\r\n\r\n  /**\r\n   * initialises the Adal service with the config specified by configIndex\r\n   * @param configIndex - Determines which config will be selected, used as an index on `this.adalConfigs`\r\n   * @example\r\n   * if (aadService.isValidAdalConfigIndex(index)) {\r\n   *     intialiseAdalServiceWithConfig(index);\r\n   * }\r\n   */\r\n  public initialiseAdalServiceWithConfig(configIndex: number) {\r\n    if (!this.isValidAdalConfigIndex(configIndex)) {\r\n      throw new Error('ConfigIndex out of bounds. Consider checking with the isValidAdalConfigIndex helper method before calling.');\r\n    }\r\n\r\n    console.debug(`Initialising adal4Service with config index: ` + configIndex);\r\n\r\n    const config = this.adalConfigs[configIndex];\r\n    console.debug(`Adal config: `);\r\n    console.debug('- tenant: ' + config.tenant);\r\n    console.debug('- clientId: ' + config.clientId);\r\n\r\n    this.adalService.init(this.adalConfigs[configIndex]);\r\n\r\n    console.debug('>>>>>>> Actual config after init:');\r\n    console.debug(this.adalService.config);\r\n  }\r\n\r\n  /**\r\n   * Each AD token contains its tenant. Given a token, the tenant can be\r\n   * extracted and passed into getConfigIndexByTenant which will return the\r\n   * config index for that tenant\r\n   */\r\n  public getConfigIndexByTenant(tenant: string) {\r\n    if (tenant === this.adalConfigs[0].tenant) {\r\n      return 0;\r\n    }\r\n\r\n    throw Error(`Unknown tenant passed in: ${tenant}`);\r\n  }\r\n\r\n  public handleWindowCallbackFromAzureLogin() {\r\n    this.adalService.handleWindowCallback();\r\n  }\r\n\r\n  public loginToAzure() {\r\n    // Whenever the user gets a new AAD token we clear any existing VIP token\r\n    // TODO: Why do we need to clear the VIP token, does this really make sense?\r\n    this.storage.clearVipToken();\r\n    this.storage.clearTransactionId();\r\n\r\n    this.adalService.login();\r\n  }\r\n\r\n  public logoutOfAzure() {\r\n    // Delete the user's Azure instance selection when they logout\r\n    this.storage.clearAzureInstance();\r\n\r\n    this.adalService.logOut();\r\n  }\r\n\r\n  public retrieveAadToken(): string {\r\n    return this.adalService.userInfo.token;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { AadService } from '../../services/aad.service';\r\nimport { StorageService } from '../../services/storage.service';\r\n\r\n@Component({\r\n  selector: 'lib-azure-login',\r\n  templateUrl: './azure-login.component.html',\r\n  styleUrls: ['./azure-login.component.css', '../../main.css']\r\n})\r\nexport class AzureLoginComponent implements OnInit {\r\n\r\n  public readonly azureInstanceAD = 'NSW Health Employee';\r\n\r\n  constructor(\r\n    private aadService: AadService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private storage: StorageService\r\n  ) { }\r\n\r\n  private async handleLoginRouting() {\r\n    const routeParams = this.activatedRoute.snapshot.params.tenantConfigId as number | null;\r\n\r\n    // If we're returning from a login, initialise ADAL with the supplied config index\r\n    if (routeParams) {\r\n      this.aadService.initialiseAdalServiceWithConfig(routeParams);\r\n      this.aadService.handleWindowCallbackFromAzureLogin();\r\n\r\n      const lastLocation = this.storage.retrieveLastLocation();\r\n      this.storage.clearLastLocation();\r\n\r\n      if (lastLocation) {\r\n        // Use href to simplify the process of restoring and routing\r\n        // route parameters and query parameters\r\n        // When we return from a 401 back to a route that has query params\r\n        // e.g. the Diagnostic Report screen, we want those query params\r\n        // to be included\r\n        window.location.href = lastLocation;\r\n      } else {\r\n        await this.router.navigate(['']);\r\n      }\r\n    } else {\r\n      // there is only one login for this app, just pick it\r\n      this.selectAzureInstance(this.azureInstanceAD);\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    console.debug('LOGIN onInit');\r\n    await this.handleLoginRouting();\r\n  }\r\n\r\n  public selectAzureInstance(instance: string) {\r\n    console.debug('Selecting Azure instance: ' + instance);\r\n\r\n    // Whilst this is redundant (because we will only ever pass in `this.azureInstanceAD`)\r\n    // We want to keep the structure of the ADAL initialisation the same as the base PoC\r\n    // from when there were multiple ADs\r\n    if (instance === this.azureInstanceAD) {\r\n      this.aadService.initialiseAdalServiceWithConfig(AadService.AZURE_AD_INSTANCE);\r\n    }\r\n\r\n    // Log the user into the selected Azure instance\r\n    // When Azure responds, it will have the tenantConfig of 0 which will\r\n    // then route the user to their last window location in the constructor above.\r\n    this.aadService.loginToAzure();\r\n  }\r\n}\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <button color=\"accent\" mat-raised-button class=\"big\" (click)=\"selectAzureInstance(azureInstanceAD)\">\r\n    {{azureInstanceAD}}\r\n  </button>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AadService } from '../../services/aad.service';\r\n\r\n@Component({\r\n  template: '',\r\n  selector: 'lib-azure-logout'\r\n})\r\nexport class AzureLogoutComponent implements OnInit {\r\n  constructor(private aadService: AadService) { }\r\n\r\n  ngOnInit() {\r\n    this.aadService.logoutOfAzure();\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'lib-contact-admin',\r\n  templateUrl: './contact-admin.component.html',\r\n  styleUrls: ['./contact-admin.component.scss', '../../main.css']\r\n})\r\nexport class ContactAdminComponent {\r\n\r\n  public readonly email: string = 'NSWPATH-TestCatalogue@health.nsw.gov.au';\r\n  public readonly subject: string = 'Requesting Access to the Statewide Test Catalogue';\r\n  public readonly href: string = `mailto:${this.email}?subject=${this.subject}`;\r\n  constructor(private readonly router: Router) { }\r\n\r\n  public async redirect() {\r\n    await this.router.navigate(['authentication/login']);\r\n  }\r\n}\r\n","<div class=\"container h-50\">\r\n  <div class=\"row align-items-center h-100\">\r\n    <div class=\"col-10 mx-auto\">\r\n      <div class=\"jumbotron\">\r\n        <h1 class=\"display-4\">Access Denied</h1>\r\n        <hr class=\"my-4\">\r\n        <p class=\"lead\">\r\n          Unfortunately, If you have reached this page after logging in, it means you do not have the required\r\n          permissions to proceed. Please contact us at (<a rel=\"noopener noreferrer\" href=\"{{href}}\">{{email}}</a>) to\r\n          request access. We apologize for any inconvenience.\r\n        </p>\r\n        <button mat-raised-button color=\"primary\" (click)=\"redirect()\">Return to login</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\n\r\n// Semantics Device Fingerprint library\r\ndeclare var IaDfp: any;\r\n\r\n@Injectable()\r\nexport class IaDfpService {\r\n  public readonly IaDfp = IaDfp;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EMPTY, Observable, throwError } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { IMfaMessage } from '../model/mfaMessage';\r\nimport { NswhpAuthService } from '../nswhpauth.service';\r\nimport { IaDfpService } from './iadfp.service';\r\nimport { StorageService } from './storage.service';\r\n\r\n// Semantics Device Fingerprint library\r\n@Injectable()\r\nexport class VipService {\r\n  private pushUrl: string;\r\n  private otpUrl: string;\r\n  private sendOtpUrl: string;\r\n  private registerUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private storage: StorageService,\r\n    private iaDfpService: IaDfpService,\r\n    private nswhpAuthService: NswhpAuthService\r\n  ) {\r\n    this.pushUrl = this.nswhpAuthService.nswhpAuthOptions.adal.pushUrl;\r\n    this.otpUrl = this.nswhpAuthService.nswhpAuthOptions.adal.otpUrl;\r\n    this.sendOtpUrl = this.nswhpAuthService.nswhpAuthOptions.adal.sendOtpUrl;\r\n    this.registerUrl = this.nswhpAuthService.nswhpAuthOptions.adal.registerUrl;\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                                 PUSH                                  *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // Wait for user to accept push notification\r\n  public pollUsersPushResponse(): Observable<IMfaMessage> {\r\n    console.debug('Authenticating user with PUSH...');\r\n\r\n    const body = JSON.stringify({ transactionId: this.storage.retrieveTransactionId() });\r\n    console.debug('TRANSACTION ID = ' + this.storage.retrieveTransactionId());\r\n\r\n    return this.http.post<IMfaMessage>(this.pushUrl, body)\r\n      .pipe(map(res => this.extractData(res)))\r\n      .pipe(catchError(this.handleError.bind(this)));\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                                 OTP                                   *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // Send otp code for authentication\r\n  public authenticateOtpCode(otpCode: string): Observable<IMfaMessage> {\r\n    console.debug('Authenticating user with OTP...');\r\n\r\n    const newDeviceFingerprint = this.getDeviceFingerprint();\r\n    const body = {\r\n      deviceFingerprint: newDeviceFingerprint,\r\n      otp: otpCode\r\n    };\r\n\r\n    return this.http.post<IMfaMessage>(this.otpUrl, body)\r\n      .pipe(map(res => this.extractData(res)))\r\n      .pipe(catchError(this.handleError.bind(this)));\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                            REGISTRATION                               *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // Send the user a SMS OTP code for registration\r\n  public sendOtpForRegistration() {\r\n    console.debug('Creating VIP Account and sending user SMS OTP code...');\r\n\r\n    const newDeviceFingerprint = this.getDeviceFingerprint();\r\n    const body = {\r\n      deviceFingerprint: newDeviceFingerprint\r\n    };\r\n\r\n    return this.http.post<IMfaMessage>(this.sendOtpUrl, body)\r\n      .pipe(map(res => this.extractData(res)))\r\n      .pipe(catchError(this.handleError.bind(this)));\r\n  }\r\n\r\n  // Send user information for VIP registration\r\n  public submitVipRegistration(newCredentialId: string, newOtp1: string, newOtp2: string, newTempOtp: string) {\r\n    console.debug('Submitting user\\'s VIP registration...');\r\n\r\n    const newDeviceFingerprint = this.getDeviceFingerprint();\r\n    const body = {\r\n      deviceFingerprint: newDeviceFingerprint,\r\n      credentialId: newCredentialId,\r\n      otp1: newOtp1,\r\n      otp2: newOtp2,\r\n      tempOtp: newTempOtp\r\n    };\r\n\r\n    console.debug('Device fingerprint: ' + newDeviceFingerprint);\r\n    console.debug('Credential ID: ' + newCredentialId);\r\n    console.debug('First security code: ' + newOtp1);\r\n    console.debug('Second security code: ' + newOtp2);\r\n    console.debug('SMS Code: ' + newTempOtp);\r\n\r\n    return this.http.post<IMfaMessage>(this.registerUrl, body)\r\n      .pipe(\r\n        tap(res => this.extractData(res),\r\n          catchError(this.handleError.bind(this)))\r\n      );\r\n  }\r\n\r\n  // Return to the last location the user made a http request and got a 401\r\n  public redirectToLastLocation() {\r\n    console.debug('### VIP SERVICE: redirectToLastLocation');\r\n    const lastLocation = this.storage.retrieveLastLocation();\r\n    this.storage.clearLastLocation();\r\n    if (lastLocation) {\r\n      console.debug('### We HAVE just returned from handling a 401 error. Redirecting to... ' + lastLocation);\r\n\r\n      this.storage.clearLastLocation();\r\n      // Use hreft to simplify the process of restoring and routing\r\n      // route parameters and query parameters\r\n      window.location.href = lastLocation;\r\n    } else {\r\n      console.debug('### We have NOT returned from handling a 401 error');\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  private getDeviceFingerprint() {\r\n    return this.iaDfpService.IaDfp.readFingerprint();\r\n  }\r\n\r\n  private extractData(res: IMfaMessage) {\r\n    console.debug('>>> VIP SERVICE: ');\r\n    console.debug(res);\r\n\r\n    // Store the Vip token if returned here so the components don't have to think about it\r\n    if (res.vipToken) {\r\n      this.storage.storeVipToken(res.vipToken);\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * If the error is a 403 navigate to the Contact Admin page, otherwise bubble\r\n   * the error up\r\n   */\r\n  private async handleError(error: HttpErrorResponse) {\r\n    // 403 Forbidden - Require Admin\r\n    if (error.status === 403) {\r\n      await this.handleContactAdmin(error);\r\n      return EMPTY;\r\n    } else {\r\n      return throwError(error);\r\n    }\r\n  }\r\n\r\n  private async handleContactAdmin(error: HttpErrorResponse) {\r\n    console.debug('Handling Operation Not Allowed');\r\n    console.debug('User is unable to continue authorization process.');\r\n    console.debug(error.error.detailMessage);\r\n    console.debug('Redirecting user to contact admin page...');\r\n\r\n    // To be implemented under DT-1138\r\n    await this.router.navigate(['/authentication/contact-admin/' + error.error.requestId]);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-tick',\r\n  templateUrl: './tick.component.html',\r\n  styleUrls: ['./tick.component.css']\r\n})\r\nexport class TickComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <div *ngIf=\"!authenticated\">\r\n    <h2>Please enter your Security Code below and press Submit</h2>\r\n    <h3>You can find your Security Code in your VIP Access mobile app or desktop app</h3>\r\n    <p *ngIf=\"failed\" class=\"invalid-input-message\">Failed to authenticate OTP, please try again.</p>\r\n    <form (submit)=\"onSubmit(otpCode.value)\">\r\n      <div class=\"container-body\">\r\n        <mat-form-field class=\"search-form-field\">\r\n          <input #otpCode matFormFieldControl matInput type=\"text\" placeholder=\"SECURITY CODE\" required\r\n            [ngClass]=\"{ 'invalid-input' : failed }\" (keypress)=\"enteringOtp()\" />\r\n\r\n        </mat-form-field>\r\n\r\n        <div class=\"container-button\">\r\n          <button mat-button matSuffix color=\"accent\" mat-raised-button id=\"submit\" type=\"submit\">\r\n            {{submitButtonText}}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div *ngIf=\"authenticated\">\r\n    <h1>Success!</h1>\r\n    <lib-tick></lib-tick>\r\n  </div>\r\n</section>\r\n","<div class=\"checkmark\">\r\n  <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\r\n    y=\"0px\" viewBox=\"0 0 161.2 161.2\" enable-background=\"new 0 0 161.2 161.2\" xml:space=\"preserve\">\r\n    <path class=\"path\" fill=\"none\" stroke=\"#7DB0D5\" stroke-miterlimit=\"10\" d=\"M425.9,52.1L425.9,52.1c-2.2-2.6-6-2.6-8.3-0.1l-42.7,46.2l-14.3-16.4\r\n\tc-2.3-2.7-6.2-2.7-8.6-0.1c-1.9,2.1-2,5.6-0.1,7.7l17.6,20.3c0.2,0.3,0.4,0.6,0.6,0.9c1.8,2,4.4,2.5,6.6,1.4c0.7-0.3,1.4-0.8,2-1.5\r\n\tc0.3-0.3,0.5-0.6,0.7-0.9l46.3-50.1C427.7,57.5,427.7,54.2,425.9,52.1z\" />\r\n    <circle class=\"path\" fill=\"none\" stroke=\"rgba(155, 255, 177, 1)\" stroke-width=\"4\" stroke-miterlimit=\"10\" cx=\"80.6\"\r\n      cy=\"80.6\" r=\"62.1\" />\r\n    <polyline class=\"path\" fill=\"none\" stroke=\"rgba(155, 255, 177, 1)\" stroke-width=\"6\" stroke-linecap=\"round\"\r\n      stroke-miterlimit=\"10\" points=\"113,52.8\r\n\t74.1,108.4 48.2,86.4 \" />\r\n\r\n    <circle class=\"spin\" fill=\"none\" stroke=\"rgba(155, 255, 177, 1)\" stroke-width=\"4\" stroke-miterlimit=\"10\"\r\n      stroke-dasharray=\"12.2175,12.2175\" cx=\"80.6\" cy=\"80.6\" r=\"73.9\" />\r\n\r\n  </svg>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { VipService } from '../../services/vip.service';\r\nimport { IMfaMessage } from '../../model/mfaMessage';\r\n\r\n@Component({\r\n  selector: 'lib-otp',\r\n  templateUrl: './otp.component.html',\r\n  styleUrls: ['./otp.component.scss', '../../main.css']\r\n})\r\nexport class OtpComponent implements OnInit {\r\n\r\n  submitted = false;\r\n  authenticated = false;\r\n  failed = false;\r\n\r\n  submitButtonText = 'Submit';\r\n\r\n  constructor(\r\n    private vipService: VipService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit(code: string): false {\r\n\r\n    if (!this.submitted) {\r\n      this.submitted = true;\r\n      this.submitButtonText = 'Submitting...';\r\n\r\n      this.vipService.authenticateOtpCode(code).subscribe(\r\n        response => { this.handleSuccessfulOtpAuthentication(response); },\r\n        () => { this.handleFailedOtpAuthentication(); }\r\n      );\r\n    }\r\n\r\n    return false; // Don't cause a reload\r\n  }\r\n\r\n  private handleSuccessfulOtpAuthentication(response: IMfaMessage) {\r\n    console.debug(response);\r\n\r\n    this.authenticated = true;\r\n    this.failed = false;\r\n\r\n    // NOTE: VipService intercepts the response and stores the Vip token\r\n\r\n    this.vipService.redirectToLastLocation();\r\n  }\r\n\r\n  private handleFailedOtpAuthentication() {\r\n    this.submitted = false;\r\n    this.failed = true;\r\n    this.submitButtonText = 'Try Again';\r\n  }\r\n\r\n  // Turn the input green again when the user starts changing the otp code\r\n  public enteringOtp() {\r\n    this.failed = false;\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.css']\r\n})\r\nexport class SpinnerComponent {\r\n  isDelayedRunning = false;\r\n\r\n  constructor() { }\r\n\r\n  @Input()\r\n  public set isRunning(value: boolean) {\r\n    this.isDelayedRunning = value;\r\n  }\r\n}\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <div *ngIf=\"waiting\">\r\n    <h2>A push notification has been sent to your mobile device.</h2>\r\n    <h3>Waiting for Sign in Request to be approved...</h3>\r\n    <lib-spinner [isRunning]=\"waiting\"></lib-spinner>\r\n    <h3>Please do not refresh this page</h3>\r\n    <button mat-button mat-raised-button color=\"primary\" (click)=\"useOTP()\">Use OTP Instead</button>\r\n  </div>\r\n  <div *ngIf=\"!waiting\">\r\n    <h1>{{statusMessage}}</h1>\r\n    <h2>{{detailMessage}}</h2>\r\n    <div *ngIf=\"success\">\r\n      <lib-tick></lib-tick>\r\n    </div>\r\n    <div *ngIf=\"!success\">\r\n      <button mat-button mat-raised-button color=\"primary\" (click)=\"useOTP()\">Use OTP Instead</button>\r\n    </div>\r\n  </div>\r\n</section>\r\n","<div [hidden]=\"!isDelayedRunning\" class=\"spinner\">\r\n  <div class=\"double-bounce1\"></div>\r\n  <div class=\"double-bounce2\"></div>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { IMfaMessageErrorMessage } from '../../model/mfaErrorMessage';\r\nimport { IMfaMessage } from '../../model/mfaMessage';\r\nimport { VipService } from '../../services/vip.service';\r\n\r\n@Component({\r\n  selector: 'lib-push',\r\n  templateUrl: './push.component.html',\r\n  styleUrls: ['./push.component.scss', '../../main.css']\r\n})\r\nexport class PushComponent implements OnInit {\r\n\r\n  waiting: boolean;\r\n  public success: boolean;\r\n\r\n  public statusMessage = '';\r\n  public detailMessage = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private vipService: VipService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // Call API and wait for response\r\n    this.waiting = true;\r\n\r\n    this.vipService.pollUsersPushResponse().subscribe(\r\n      response => {\r\n        this.handleSuccessfulPush(response);\r\n      },\r\n      error => {\r\n        this.handleFailedPush(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private handleSuccessfulPush(response: IMfaMessage) {\r\n    console.debug('SUCCESS: User accepted push notification');\r\n    console.debug('vipToken: ' + response.vipToken);\r\n    console.debug(response);\r\n\r\n    // Hide the waiting screen and show success!\r\n    this.waiting = false;\r\n    this.success = true;\r\n\r\n    this.statusMessage = response.statusMessage;\r\n    this.detailMessage = response.detailMessage;\r\n\r\n    // NOTE: VipService intercepts the response and stores the Vip token\r\n\r\n    this.vipService.redirectToLastLocation();\r\n  }\r\n\r\n  private handleFailedPush(error: HttpErrorResponse) {\r\n    console.debug('ERROR: Did not receive user\\'s push acceptance');\r\n    console.error(error);\r\n    console.error(error.error);\r\n\r\n    // Hide the waiting screen and show failure!\r\n    this.waiting = false;\r\n    this.success = false;\r\n\r\n    const err = error.error as IMfaMessageErrorMessage;\r\n\r\n    this.statusMessage = err.statusMessage;\r\n    this.detailMessage = err.detailMessage;\r\n  }\r\n\r\n\r\n  public async useOTP() {\r\n    console.debug('User has selected to use OTP instead of Push. Redirecting...');\r\n    await this.router.navigate(['authentication/otp']);\r\n  }\r\n}\r\n","<section class=\"mat-elevation-z2 form-container\">\r\n  <h3 *ngIf=\"failed\">Failed Registration.<br>We have sent you a new SMS code. Please try again.</h3>\r\n\r\n  <div [ngClass]=\"{ 'hidden' : registered }\">\r\n    <p class=\"invalid-input-message\">{{invalidInputMessage}}</p>\r\n\r\n    <form autocomplete=\"off\" (submit)=\"onSubmit(credentialId.value, otp1.value, otp2.value, tempOtp.value)\">\r\n      <p>Download Symantec VIP Access for desktop or mobile\r\n        <a href=\"https://vip.symantec.com/\" target=\"_blank\" rel=\"external nofollow noopener\">here.</a>\r\n      </p>\r\n\r\n      <mat-form-field>\r\n        <input #credentialId matInput [value]=\"credentialIdValue\" name=\"credentialId\" type=\"text\" required\r\n          placeholder=\"Enter VIP Credential ID\" [ngClass]=\"{ 'invalid-input' : !validInputs[0] }\" id=\"0\"\r\n          (change)=\"validateInput(credentialId)\">\r\n      </mat-form-field>\r\n\r\n      <p>Please enter two <u>sequential</u> security codes</p>\r\n      <mat-form-field>\r\n        <input #otp1 matInput required [value]=\"otp1Value\" type=\"text\" placeholder=\"FIRST SECURITY CODE\"\r\n          [ngClass]=\"{ 'invalid-input' : !validInputs[1] }\" id=\"1\" (change)=\"validateInput(otp1)\">\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <input #otp2 matInput required [value]=\"otp2Value\" type=\"text\" placeholder=\"SECOND SECURITY CODE\"\r\n          [ngClass]=\"{ 'invalid-input' : !validInputs[2] }\" id=\"2\" (change)=\"validateInput(otp2)\">\r\n      </mat-form-field>\r\n\r\n      <div *ngIf=\"!smsCodeSent\">\r\n        <p>Sending SMS code to your mobile device...</p>\r\n        <mat-chip-list>\r\n          <mat-chip selectable=false>Waiting for SMS code...</mat-chip>\r\n        </mat-chip-list>\r\n      </div>\r\n\r\n      <p *ngIf=\"smsCodeSent\">SMS Code has been sent to +{{mobileNumber}}</p>\r\n      <mat-form-field>\r\n        <input #tempOtp matInput required [value]=\"tempOtpValue\" type=\"text\" placeholder=\"SMS CODE\"\r\n          [ngClass]=\"{ 'invalid-input' : !validInputs[3], 'hidden' : !smsCodeSent }\" id=\"3\"\r\n          (change)=\"validateInput(tempOtp)\">\r\n      </mat-form-field>\r\n\r\n      <button mat-button mat-raised-button color=\"primary\" id=\"submit\" type=\"submit\"\r\n        [ngClass]=\"{ 'hidden' : !smsCodeSent }\">{{submitButtonText}}</button>\r\n    </form>\r\n  </div>\r\n\r\n  <div [ngClass]=\"{ 'hidden' : !registered }\">\r\n    <h3>{{statusMessage}}</h3>\r\n    <lib-tick></lib-tick>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { IMfaMessage } from '../../model/mfaMessage';\r\nimport { VipHttpErrorResonse } from '../../model/vipHttpErrorResponse';\r\nimport { VipService } from '../../services/vip.service';\r\n\r\n@Component({\r\n  selector: 'lib-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss', '../../main.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  smsCodeSent = false;\r\n  registered = false;\r\n  failed = false;\r\n\r\n  statusMessage = '';\r\n  submitButtonText = 'Register';\r\n\r\n  mobileNumber = '';\r\n  invalidInputMessage = '';\r\n\r\n  // Input values\r\n  credentialIdValue = '';\r\n  otp1Value = '';\r\n  otp2Value = '';\r\n  tempOtpValue = '';\r\n\r\n  // Store the valid flag for each input in the form\r\n  validInputs = [true, true, true, true];\r\n  CREDENTIAL_ID = 0;\r\n  OTP_1 = 1;\r\n  OTP_2 = 2;\r\n  TEMP_OTP = 3;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private vipService: VipService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // Send SMS OTP code for registration\r\n    this.initiateRegistrationProcess();\r\n  }\r\n\r\n  private initiateRegistrationProcess() {\r\n    this.smsCodeSent = false;\r\n    this.validInputs = [true, true, true, true];\r\n\r\n    this.vipService.sendOtpForRegistration().subscribe(\r\n      response => {\r\n        console.debug(response);\r\n        this.smsCodeSent = true;\r\n        this.mobileNumber = response.mobileNumber;\r\n      },\r\n      async error => {\r\n        console.debug('Error sending SMS code to user for registration...');\r\n        console.debug(error);\r\n\r\n        // TODO: Do we want to handle better\r\n        // We need to pass in the request id to the page\r\n        await this.router.navigate(['/authentication/contact-admin']);\r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit(credentialId: string, otp1: string, otp2: string, tempOtp: string): false {\r\n\r\n    if (this.allInputsValid(credentialId, otp1, otp2, tempOtp)) {\r\n      this.submitButtonText = 'Registering...';\r\n      this.vipService.submitVipRegistration(credentialId, otp1, otp2, tempOtp).subscribe(\r\n        response => { this.handleSuccessfulRegistration(response); },\r\n        error => { this.handleFailedRegistration(error); }\r\n      );\r\n    }\r\n\r\n    return false; // Don't cause a reload\r\n  }\r\n\r\n  handleSuccessfulRegistration(response: IMfaMessage) {\r\n    console.debug('SUCCESS: User registered with VIP');\r\n    console.debug('vipToken: ' + response.vipToken);\r\n    console.debug(response);\r\n\r\n    // Notify the user of successful registration and show home button\r\n    this.registered = true;\r\n    this.failed = false;\r\n    this.statusMessage = response.statusMessage;\r\n\r\n    // NOTE: VipService intercepts the response and stores the Vip token\r\n    this.vipService.redirectToLastLocation();\r\n  }\r\n\r\n  // If registration fails for any reason (we assume all inputs passed validation - even though current validation is minimal)\r\n  // we will send a new SMS code and clear all inputs so user can begin registration process again\r\n  private handleFailedRegistration(error: VipHttpErrorResonse) {\r\n    console.debug('ERROR: Failed to register user with VIP');\r\n    console.debug(error);\r\n\r\n    this.failed = true;\r\n\r\n    // Clear all inputs\r\n    this.credentialIdValue = null;\r\n    this.otp1Value = null;\r\n    this.otp2Value = null;\r\n    this.tempOtpValue = null;\r\n\r\n    // Tell user to try again with new SMS code\r\n    this.submitButtonText = 'Try Again';\r\n\r\n    this.initiateRegistrationProcess();\r\n  }\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  validateInput(input: HTMLInputElement) {\r\n    console.debug(input);\r\n\r\n    // Assume valid\r\n    this.validInputs[parseInt(input.id, 10)] = true;\r\n    this.invalidInputMessage = '';\r\n\r\n    // No whitespace\r\n    if (/\\s/.test(input.value)) {\r\n      this.validInputs[parseInt(input.id, 10)] = false;\r\n      this.invalidInputMessage = 'Input must not contain spaces';\r\n    }\r\n\r\n    // Only numbers in OTPs\r\n    if (input.id === this.OTP_1.toString() || input.id === this.OTP_2.toString() || input.id === this.TEMP_OTP.toString()) {\r\n      const nums = /^[0-9]*$/;\r\n      if (!input.value.match(nums)) {\r\n        this.validInputs[parseInt(input.id, 10)] = false;\r\n        this.invalidInputMessage = 'Codes may only contains numbers';\r\n      }\r\n    }\r\n\r\n    console.debug(this.validInputs);\r\n  }\r\n\r\n  private allInputsValid(credentialId: string, otp1: string, otp2: string, tempOtp: string): boolean {\r\n\r\n    // Ensure all inputs have been entered\r\n    if (tempOtp.length <= 0) {\r\n      this.validInputs[this.TEMP_OTP] = false;\r\n    }\r\n    if (otp2.length <= 0) {\r\n      this.validInputs[this.OTP_2] = false;\r\n    }\r\n    if (otp1.length <= 0) {\r\n      this.validInputs[this.OTP_1] = false;\r\n    }\r\n    if (credentialId.length <= 0) {\r\n      this.validInputs[this.CREDENTIAL_ID] = false;\r\n    }\r\n\r\n    if (this.validInputs.includes(false)) {\r\n      this.invalidInputMessage = 'Please fill in all fields';\r\n      return false;\r\n    } else {\r\n      this.invalidInputMessage = '';\r\n      return true;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpHeaders,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport * as HttpStatus from 'http-status-codes';\r\nimport { EMPTY, Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { IMfaMessage } from '../model/mfaMessage';\r\nimport { VipHttpErrorResonse } from '../model/vipHttpErrorResponse';\r\nimport { NswhpAuthService } from '../nswhpauth.service';\r\nimport { AadService } from './aad.service';\r\nimport { IaDfpService } from './iadfp.service';\r\nimport { StorageService } from './storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationInterceptorService implements HttpInterceptor {\r\n  private AAD_TOKEN_HEADER = 'AuthorizationAD';\r\n  private VIP_TOKEN_HEADER = 'AuthorizationVIP';\r\n  private domain: string;\r\n  private stepUpPath: string;\r\n  constructor(\r\n    private aadService: AadService,\r\n    private storageService: StorageService,\r\n    private router: Router,\r\n    private http: HttpClient,\r\n    private iaDfpService: IaDfpService,\r\n    private nswhpAuthService: NswhpAuthService\r\n  ) {\r\n    this.domain = this.nswhpAuthService.nswhpAuthOptions.vip.domain;\r\n    this.stepUpPath = this.nswhpAuthService.nswhpAuthOptions.vip.stepUpPath;\r\n  }\r\n\r\n  intercept(request: HttpRequest<HttpAuthRequest>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    request = this.addAuthHeaders(request);\r\n\r\n    return next.handle(request).pipe(\r\n      catchError(this.handleError.bind(this))\r\n    );\r\n  }\r\n\r\n  public addAuthHeaders(request: HttpRequest<HttpAuthRequest>) {\r\n    const headers: {\r\n      [index: string]: string\r\n    } = {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, DELETE',\r\n      'Access-Control-Max-Age': '3600',\r\n      'Access-Control-Allow-Headers': 'x-requested-with'\r\n    };\r\n\r\n    // These have been added separately since string interpolation is not supported for object keys\r\n    const aadToken = this.aadService.retrieveAadToken();\r\n    if (aadToken) {\r\n      headers[this.AAD_TOKEN_HEADER] = aadToken;\r\n    }\r\n\r\n    const vipToken = this.storageService.retrieveVipToken();\r\n    if (vipToken) {\r\n      headers[this.VIP_TOKEN_HEADER] = (vipToken as string);\r\n    }\r\n\r\n    request = request.clone({\r\n      setHeaders: headers\r\n    });\r\n\r\n    return request;\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                    USER AUTHORIZATION LOGIC [401]                     *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  // If the user is unable to reach the API endpoint we must ensure they are authenticated.\r\n  // The user is first authenticated with Azure AD\r\n  //     - If the user does not have a valid AAD token we redirect them to login to Azure AD\r\n  // The user is then required to have a VIP token\r\n  //     - The '/stepup' endpoint must be called and then the following may happen:\r\n  //         + If the user is not risky then we are immediately provided with the VIP token\r\n  //         + If the user is risky then they are redirect to the provided MFA medium (push or otp)\r\n  //             = NOTE: If the user is redirect to push or otp they will be redirected\r\n  //                     back home once they have a valid VIP token\r\n  private async handleUserAuthorization(error: HttpErrorResponse) {\r\n    // Store the user context so we can return here after handling the 401\r\n    this.storageService.storeLastLocation();\r\n\r\n    // Check if the user is authenticated with Azure:\r\n    //      If they are, we have a valid AAD Token and we can continue.\r\n    //      If they are not, we redirect them to the Azure login page and leave\r\n    //       them there until they successfully login. They will then be redirected to the home page\r\n    if (this.isNewAadTokenRequired(error)) {\r\n      await this.router.navigate(['authentication/login']);\r\n    } else {\r\n      this.getVipToken();\r\n    }\r\n  }\r\n\r\n  private async handleError(error: HttpErrorResponse) {\r\n    // Handle Unauthorized error globally\r\n    // AuthService will handle other 400 errors\r\n    switch (error.status) {\r\n      case HttpStatus.UNAUTHORIZED:\r\n        console.debug('401 received, redirecting to login');\r\n        await this.handleUserAuthorization(error);\r\n        break;\r\n      case HttpStatus.FORBIDDEN:\r\n        console.debug('403 received in AuthenticationInterceptor, redirecting to contact admin');\r\n        await this.router.navigate(['/authentication/contact-admin']);\r\n        return EMPTY;\r\n      default:\r\n        return throwError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the error contains 'VIP' then we assume the AAD token is being successfully used\r\n   * and that the 401 is caused by a missing or invalid VIP token\r\n   * @param HttpErrorResponse returned by the call\r\n   */\r\n  private isNewAadTokenRequired(error: HttpErrorResponse) {\r\n    let required = true;\r\n    const re = /(vip|VIP)/;\r\n    if (error.error.message.search(re) !== -1) {\r\n      required = false;\r\n    }\r\n\r\n    return required;\r\n  }\r\n\r\n\r\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n   *                             VIP TOKEN                                 *\r\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  /**\r\n   * Initiates the steps to retrieve a VIP token from the server\r\n   */\r\n  private getVipToken() {\r\n    console.debug('Requesting new VIP Token...');\r\n\r\n    this.stepUpAuthentication().subscribe(\r\n      async response => {\r\n        this.logStepUpResponse(response);\r\n        await this.handleStepUpAuthentication(response);\r\n      },\r\n      async error => {\r\n        // NOTE: We specifically handle 403 and 404 errors here\r\n        // Only 401 is handled globally. Other Auth related http calls\r\n        // are made in AuthService that handles the other 400 errors.\r\n\r\n        // Forbidden - Contact an admin (requestId)\r\n        if (error.status === HttpStatus.FORBIDDEN) {\r\n          console.error('403 received');\r\n          // TODO: This\r\n          await this.handleContactAdmin(error);\r\n          return EMPTY;\r\n        } else if (error.status === HttpStatus.NOT_FOUND) {\r\n          console.error('404 received');\r\n          await this.handleRegistration(error);\r\n          return EMPTY;\r\n        } else {\r\n          await this.handleError(error);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private stepUpAuthentication(): Observable<HttpResponse<IMfaMessage>> {\r\n    console.debug('User required to step up authentication: ');\r\n\r\n    // We can assume that if we are requesting a VIP token we already have a valid AAD Token\r\n    const authorization = this.aadService.retrieveAadToken();\r\n    const newHeaders = new HttpHeaders().set(this.AAD_TOKEN_HEADER, authorization);\r\n\r\n    const options = {\r\n      headers: newHeaders,\r\n      observe: 'response' as 'body'\r\n    };\r\n\r\n    const newDeviceFingerprint = this.iaDfpService.IaDfp.readFingerprint();\r\n\r\n    const json = {\r\n      deviceFingerprint: newDeviceFingerprint\r\n    };\r\n    const body = JSON.stringify(json);\r\n    const url = this.domain + this.stepUpPath;\r\n\r\n    console.debug('Sending request: ');\r\n    console.debug('- url: ' + url);\r\n    console.debug('- authorization: ' + authorization);\r\n    console.debug('- body: ' + body);\r\n\r\n    return this.http.post<any>(url, body, options);\r\n  }\r\n\r\n  private async handleStepUpAuthentication(response: HttpResponse<IMfaMessage>) {\r\n    const res = response.body;\r\n    console.debug(response);\r\n    console.debug(res);\r\n\r\n    // Store transactionId\r\n    this.storageService.storeTransactionId(res.transactionId);\r\n\r\n    // If the user is not risky we can immediately return the provided VIP Token\r\n    // TODO: remove risky from response\r\n    if (res.risky) {\r\n      console.debug('User is required to use Multi-Factor Authentication');\r\n      console.debug(`Redirecting user to ${res.medium} page...`);\r\n\r\n      // Wait for the user to press the next button before routing to mfa page\r\n      await this.router.navigate([`/authentication/${res.medium.toString().toLowerCase()}`]);\r\n    } else {\r\n\r\n      // Store the token locally\r\n      this.storageService.storeVipToken(res.vipToken);\r\n\r\n      location.reload();\r\n    }\r\n  }\r\n\r\n  private logStepUpResponse(response: HttpResponse<IMfaMessage>) {\r\n    console.debug(response);\r\n    console.debug('\\'risky\\': ' + response.body.risky);\r\n    console.debug('\\'requestId\\': ' + response.body.requestId);\r\n    console.debug('\\'medium\\': ' + response.body.medium);\r\n    console.debug('\\'transactionId\\': ' + response.body.transactionId);\r\n    console.debug('\\'vipToken\\': ' + response.body.vipToken);\r\n  }\r\n\r\n  //  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //      *                        INTERCEPT REQUEST HEADERS                      *\r\n  //      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //     // Custom headers with AAD and VIP authorization tokens\r\n  //     getRequestOptionArgs(options?: RequestOptionsArgs): RequestOptionsArgs {\r\n  //       if (options == null) {\r\n  //           options = new RequestOptions();\r\n  //       }\r\n  //       if (options.headers == null) {\r\n  //           options.headers = new Headers();\r\n  //       }\r\n  //       options.headers.append('Content-Type', 'application/json');\r\n\r\n  //       // Default headers\r\n  //       options.headers.append('Access-Control-Allow-Origin', '*');\r\n  //       options.headers.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\r\n  //       options.headers.append('Access-Control-Max-Age', '3600');\r\n  //       options.headers.append('Access-Control-Allow-Headers', 'x-requested-with');\r\n\r\n  //       // NOTE: The error interceptor handles updating the authorization tokens when we get a 401\r\n\r\n  //       // AAD Token\r\n  //       const authorization = this.aadService.retrieveAadToken();\r\n  //       options.headers.append(this.AAD_TOKEN_HEADER, authorization);\r\n\r\n  //       // VIP Token\r\n  //       const authorizationVip = this.storage.retrieveVipToken();\r\n  //       options.headers.append(this.VIP_TOKEN_HEADER,  authorizationVip);\r\n\r\n  //       return options;\r\n  //   }\r\n\r\n\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                    USER AUTHORIZATION LOGIC [401]                     *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //    // If the user is unable to reach the API endpoint we must ensure they are authenticated.\r\n  //    // The user is first authenticated with Azure AD\r\n  //    //     - If the user does not have a valid AAD token we redirect them to login to Azure AD\r\n  //    // The user is then required to have a VIP token\r\n  //    //     - The '/stepup' endpoint must be called and then the following may happen:\r\n  //    //         + If the user is not risky then we are immediately provided with the VIP token\r\n  //    //         + If the user is risky then they are redirect to the provided MFA medium (push or otp)\r\n  //    //             = NOTE: If the user is redirect to push or otp they will be redirected\r\n  //    //                     back home once they have a valid VIP token\r\n  //    private handleUserAuthorization(error: Response) {\r\n  //        // Store the user context so we can return here after handling the 401\r\n  //        this.storage.storeLastLocation();\r\n\r\n  //        // Check if the user is authenticated with Azure:\r\n  //        //      If they are, we have a valid AAD Token and we can continue.\r\n  //        //      If they are not, we redirect them to the Azure login page and leave\r\n  //        //       them there until they successfully login. They will then be redirected to the home page\r\n  //        if (this.checkNewAadTokenIsRequired(error)) {\r\n  //            this.getAadToken();\r\n  //        } else {\r\n  //            this.getVipToken();\r\n  //        }\r\n  //    }\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                             AAD TOKEN                                 *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //   // If the 401 error response message contains 'VIP' then we know that the user\r\n  //   // either did not proved an AAD token or the provided AAD token is invalid.\r\n  //   // If the message does NOT contain 'VIP' then the provided AAD token was valid\r\n  //   // and we may simple return the currently stored AAD token.\r\n  //   private getAadToken() {\r\n  //       // If the user has selected an Azure instance then we can simply return\r\n  //       // their AAD token otherwise we redirect them to the /login page\r\n\r\n  //       // TODO: DH - Look into this, is there a missing line below? Code doesn't match the comments\r\n  //       if (this.storage.retrieveAzureInstance()) {\r\n  //           console.debug('User has already selected an Azure instance. Redirecting to Azure login page...');\r\n  //       } else {\r\n  //           console.debug('User has already NOT selected an Azure instance yet. Redirecting user to login page...');\r\n  //       }\r\n\r\n  //       // Always send the user to select an Azure instance to log in to.\r\n  //       // (even if they have previously selected an Azure instance)\r\n  //       this.router.navigate(['/authentication/login']);\r\n  //   }\r\n\r\n  //   // When the error message contains 'VIP' we know the AAD token was valid and we can just return it\r\n  //   private checkNewAadTokenIsRequired(error: Response) {\r\n  //       let required = true;\r\n  //       const re = /(vip|VIP)/;\r\n  //       if (error.json().message.search(re) !== -1) {\r\n  //           required = false;\r\n  //       }\r\n  //       return required;\r\n  //   }\r\n\r\n\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                       CONTACT ADMIN LOGIC [403]                       *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  private async handleContactAdmin(error: VipHttpErrorResonse) {\r\n    const body = error;\r\n\r\n    console.debug('Handling Operation Not Allowed');\r\n    console.debug('User is unable to continue authorization process.');\r\n    console.debug(body.error);\r\n    console.debug('Redirecting user to contact admin page...');\r\n\r\n    await this.router.navigate(['/authentication/contact-admin /' + body.requestId]);\r\n  }\r\n\r\n\r\n  //    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //     *                       REGISTRATION LOGIC [404]                        *\r\n  //     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  private async handleRegistration(error: VipHttpErrorResonse) {\r\n    const body = error;\r\n\r\n    console.debug('Handling Registration');\r\n\r\n    console.debug('User has not yet registered with VIP');\r\n    console.debug(body.error);\r\n    console.debug('Redirecting user to registration page...');\r\n\r\n    await this.router.navigate(['/authentication/register']);\r\n  }\r\n\r\n\r\n  //   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n  //    *                    OVERRIDE DEFAULT HTTP METHODS                      *\r\n  //    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\r\n\r\n  //   request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       return super.request(url, options);\r\n  //   }\r\n\r\n  //   get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       console.debug('Intercepted GET Request:');\r\n  //       console.debug('- url: ' + url);\r\n  //       return this.intercept(super.get(url, this.getRequestOptionArgs(options)));\r\n  //   }\r\n\r\n  //   post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       console.debug('Intercepted POST Request:');\r\n  //       console.debug('- url: ' + url);\r\n  //       return this.intercept(super.post(url, body, this.getRequestOptionArgs(options)));\r\n  //   }\r\n\r\n  //   put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       return this.intercept(super.put(url, body, this.getRequestOptionArgs(options)));\r\n  //   }\r\n\r\n  //   delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n  //       return this.intercept(super.delete(url, this.getRequestOptionArgs(options)));\r\n  //   }\r\n  // }\r\n\r\n}\r\nexport interface HttpAuthRequest {\r\n  [index: string]: string;\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NswhpAuthMaterialModule } from './authentication-material/nswhpauth-material.module';\nimport { AzureLoginComponent } from './components/azure-login/azure-login.component';\nimport { AzureLogoutComponent } from './components/azure-logout/azure-logout.component';\nimport { ContactAdminComponent } from './components/contact-admin/contact-admin.component';\nimport { OtpComponent } from './components/otp/otp.component';\nimport { PushComponent } from './components/push/push.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AadService } from './services/aad.service';\nimport { AuthenticationInterceptorService } from './services/AuthenticationInterceptor.service';\nimport { IaDfpService } from './services/iadfp.service';\nimport { StorageService } from './services/storage.service';\nimport { VipService } from './services/vip.service';\nimport { SpinnerComponent } from './components/spinner/spinner.component';\nimport { TickComponent } from './components/tick/tick.component';\nimport { INswhpAuthServiceOptions, NSWHP_AUTH_CONFIG } from './nswhpauth-config';\nimport { AdalService } from 'adal-angular4';\n\n\n\n@NgModule({\n  declarations: [\n    AzureLoginComponent,\n    AzureLogoutComponent,\n    OtpComponent,\n    PushComponent,\n    RegisterComponent,\n    SpinnerComponent,\n    TickComponent,\n    ContactAdminComponent,\n  ],\n  exports: [\n    AzureLoginComponent,\n    AzureLogoutComponent,\n    OtpComponent,\n    PushComponent,\n    RegisterComponent,\n    SpinnerComponent,\n    TickComponent,\n    ContactAdminComponent,\n  ],\n  imports: [\n    CommonModule,\n    NswhpAuthMaterialModule,\n  ],\n  providers: [\n    StorageService,\n    IaDfpService,\n    NswhpAuthMaterialModule,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthenticationInterceptorService,\n      multi: true\n    },\n    AadService,\n    VipService,\n    AdalService\n  ],\n  entryComponents: [\n    AzureLoginComponent,\n    AzureLogoutComponent,\n    OtpComponent,\n    PushComponent,\n    RegisterComponent,\n    SpinnerComponent,\n    TickComponent,\n    ContactAdminComponent,\n  ]\n})\nexport class NswhpAuthModule {\n  static forRoot(config: INswhpAuthServiceOptions): ModuleWithProviders<NswhpAuthModule> {\n    return {\n      ngModule: NswhpAuthModule,\n      providers: [\n        { provide: NSWHP_AUTH_CONFIG, useValue: config },\n      ]\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AzureLoginComponent } from './components/azure-login/azure-login.component';\r\nimport { AzureLogoutComponent } from './components/azure-logout/azure-logout.component';\r\nimport { ContactAdminComponent } from './components/contact-admin/contact-admin.component';\r\nimport { OtpComponent } from './components/otp/otp.component';\r\nimport { PushComponent } from './components/push/push.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'authentication/otp', component: OtpComponent },\r\n  { path: 'authentication/login', component: AzureLoginComponent },\r\n  { path: 'authentication/login/:tenantConfigId', component: AzureLoginComponent },\r\n  { path: 'authentication/logout', component: AzureLogoutComponent },\r\n  { path: 'authentication/register', component: RegisterComponent },\r\n  { path: 'authentication/push', component: PushComponent },\r\n  { path: 'authentication/contact-admin', component: ContactAdminComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NswhpAuthRoutingModule { }\r\n"]}