import { Injectable } from '@angular/core';
import * as jwtDecode_ from 'jwt-decode';
import * as i0 from "@angular/core";
const jwtDecode = jwtDecode_;
export class StorageService {
    constructor() {
        // Storage keys
        this.TRANSACTION_ID = 'TRANSACTION_ID';
        this.VIP_TOKEN = 'VIP_TOKEN';
        this.AZURE_INSTANCE = 'AZURE_INSTANCE';
        this.LAST_LOCATION = 'LAST_LOCATION';
    }
    // VIP TOKEN
    storeVipToken(token) {
        localStorage.setItem(this.VIP_TOKEN, token);
    }
    retrieveVipToken() {
        return localStorage.getItem(this.VIP_TOKEN);
    }
    clearVipToken() {
        localStorage.removeItem(this.VIP_TOKEN);
    }
    // LAST LAST_LOCATION
    storeLastLocation() {
        const location = `${window.location.pathname}${window.location.search}`;
        console.debug('### Storing last location:');
        console.debug(window.location);
        console.debug('### location = ' + location);
        localStorage.setItem(this.LAST_LOCATION, location);
    }
    retrieveLastLocation() {
        console.debug(`### Retrieving last location: ${localStorage.getItem(this.LAST_LOCATION)}`);
        return localStorage.getItem(this.LAST_LOCATION);
    }
    clearLastLocation() {
        console.debug('### Clearing the last location');
        localStorage.removeItem(this.LAST_LOCATION);
    }
    // TRANSACTION ID
    storeTransactionId(token) {
        localStorage.setItem(this.TRANSACTION_ID, token);
    }
    retrieveTransactionId() {
        return localStorage.getItem(this.TRANSACTION_ID);
    }
    clearTransactionId() {
        localStorage.removeItem(this.TRANSACTION_ID);
    }
    // AZURE INSTANCE
    storeAzureInstance(instance) {
        localStorage.setItem(this.AZURE_INSTANCE, instance.toString());
    }
    retrieveAzureInstance() {
        return parseInt(localStorage.getItem(this.AZURE_INSTANCE), 10);
    }
    retrieveAzureTenantId() {
        const azureToken = localStorage.getItem('adal.idtoken');
        if (azureToken) {
            const decodedToken = jwtDecode(azureToken);
            // tslint:disable-next-line: no-string-literal
            return decodedToken['tid'];
        }
        else {
            return null;
        }
    }
    clearAzureInstance() {
        localStorage.removeItem(this.AZURE_INSTANCE);
    }
}
StorageService.ɵfac = function StorageService_Factory(t) { return new (t || StorageService)(); };
StorageService.ɵprov = i0.ɵɵdefineInjectable({ token: StorageService, factory: StorageService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(StorageService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1Byb2plY3RzL25zd2hwYXV0aC1tb2R1bGUvcHJvamVjdHMvbnN3aHBhdXRoL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssVUFBVSxNQUFNLFlBQVksQ0FBQzs7QUFFekMsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBRTdCLE1BQU0sT0FBTyxjQUFjO0lBUXpCO1FBTkEsZUFBZTtRQUNQLG1CQUFjLEdBQUcsZ0JBQWdCLENBQUM7UUFDbEMsY0FBUyxHQUFHLFdBQVcsQ0FBQztRQUN4QixtQkFBYyxHQUFHLGdCQUFnQixDQUFDO1FBQ2xDLGtCQUFhLEdBQUcsZUFBZSxDQUFDO0lBRXhCLENBQUM7SUFFakIsWUFBWTtJQUNMLGFBQWEsQ0FBQyxLQUFhO1FBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ00sZ0JBQWdCO1FBQ3JCLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNNLGFBQWE7UUFDbEIsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELHFCQUFxQjtJQUNkLGlCQUFpQjtRQUN0QixNQUFNLFFBQVEsR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDeEUsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDNUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDTSxvQkFBb0I7UUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUNNLGlCQUFpQjtRQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDaEQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGlCQUFpQjtJQUNWLGtCQUFrQixDQUFDLEtBQWE7UUFDckMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxxQkFBcUI7UUFDMUIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sa0JBQWtCO1FBQ3ZCLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxpQkFBaUI7SUFDVixrQkFBa0IsQ0FBQyxRQUFnQjtRQUN4QyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0scUJBQXFCO1FBQzFCLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDeEQsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFRLENBQUM7WUFDbEQsOENBQThDO1lBQzlDLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBVyxDQUFDO1NBQ3RDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVNLGtCQUFrQjtRQUN2QixZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs0RUF6RVUsY0FBYztzREFBZCxjQUFjLFdBQWQsY0FBYztrREFBZCxjQUFjO2NBRDFCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGp3dERlY29kZV8gZnJvbSAnand0LWRlY29kZSc7XHJcblxyXG5jb25zdCBqd3REZWNvZGUgPSBqd3REZWNvZGVfO1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlU2VydmljZSB7XHJcblxyXG4gIC8vIFN0b3JhZ2Uga2V5c1xyXG4gIHByaXZhdGUgVFJBTlNBQ1RJT05fSUQgPSAnVFJBTlNBQ1RJT05fSUQnO1xyXG4gIHByaXZhdGUgVklQX1RPS0VOID0gJ1ZJUF9UT0tFTic7XHJcbiAgcHJpdmF0ZSBBWlVSRV9JTlNUQU5DRSA9ICdBWlVSRV9JTlNUQU5DRSc7XHJcbiAgcHJpdmF0ZSBMQVNUX0xPQ0FUSU9OID0gJ0xBU1RfTE9DQVRJT04nO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAvLyBWSVAgVE9LRU5cclxuICBwdWJsaWMgc3RvcmVWaXBUb2tlbih0b2tlbjogc3RyaW5nKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlZJUF9UT0tFTiwgdG9rZW4pO1xyXG4gIH1cclxuICBwdWJsaWMgcmV0cmlldmVWaXBUb2tlbigpIHtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlZJUF9UT0tFTik7XHJcbiAgfVxyXG4gIHB1YmxpYyBjbGVhclZpcFRva2VuKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5WSVBfVE9LRU4pO1xyXG4gIH1cclxuXHJcbiAgLy8gTEFTVCBMQVNUX0xPQ0FUSU9OXHJcbiAgcHVibGljIHN0b3JlTGFzdExvY2F0aW9uKCkge1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSBgJHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9JHt3aW5kb3cubG9jYXRpb24uc2VhcmNofWA7XHJcbiAgICBjb25zb2xlLmRlYnVnKCcjIyMgU3RvcmluZyBsYXN0IGxvY2F0aW9uOicpO1xyXG4gICAgY29uc29sZS5kZWJ1Zyh3aW5kb3cubG9jYXRpb24pO1xyXG4gICAgY29uc29sZS5kZWJ1ZygnIyMjIGxvY2F0aW9uID0gJyArIGxvY2F0aW9uKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuTEFTVF9MT0NBVElPTiwgbG9jYXRpb24pO1xyXG4gIH1cclxuICBwdWJsaWMgcmV0cmlldmVMYXN0TG9jYXRpb24oKTogc3RyaW5nIHtcclxuICAgIGNvbnNvbGUuZGVidWcoYCMjIyBSZXRyaWV2aW5nIGxhc3QgbG9jYXRpb246ICR7bG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5MQVNUX0xPQ0FUSU9OKX1gKTtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLkxBU1RfTE9DQVRJT04pO1xyXG4gIH1cclxuICBwdWJsaWMgY2xlYXJMYXN0TG9jYXRpb24oKSB7XHJcbiAgICBjb25zb2xlLmRlYnVnKCcjIyMgQ2xlYXJpbmcgdGhlIGxhc3QgbG9jYXRpb24nKTtcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuTEFTVF9MT0NBVElPTik7XHJcbiAgfVxyXG5cclxuICAvLyBUUkFOU0FDVElPTiBJRFxyXG4gIHB1YmxpYyBzdG9yZVRyYW5zYWN0aW9uSWQodG9rZW46IHN0cmluZykge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5UUkFOU0FDVElPTl9JRCwgdG9rZW4pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJldHJpZXZlVHJhbnNhY3Rpb25JZCgpIHtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlRSQU5TQUNUSU9OX0lEKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhclRyYW5zYWN0aW9uSWQoKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLlRSQU5TQUNUSU9OX0lEKTtcclxuICB9XHJcblxyXG4gIC8vIEFaVVJFIElOU1RBTkNFXHJcbiAgcHVibGljIHN0b3JlQXp1cmVJbnN0YW5jZShpbnN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLkFaVVJFX0lOU1RBTkNFLCBpbnN0YW5jZS50b1N0cmluZygpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXRyaWV2ZUF6dXJlSW5zdGFuY2UoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLkFaVVJFX0lOU1RBTkNFKSwgMTApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJldHJpZXZlQXp1cmVUZW5hbnRJZCgpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgYXp1cmVUb2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhZGFsLmlkdG9rZW4nKTtcclxuICAgIGlmIChhenVyZVRva2VuKSB7XHJcbiAgICAgIGNvbnN0IGRlY29kZWRUb2tlbiA9IGp3dERlY29kZShhenVyZVRva2VuKSBhcyBhbnk7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgcmV0dXJuIGRlY29kZWRUb2tlblsndGlkJ10gYXMgc3RyaW5nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXJBenVyZUluc3RhbmNlKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5BWlVSRV9JTlNUQU5DRSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==