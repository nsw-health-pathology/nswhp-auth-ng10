import { Injectable } from '@angular/core';
import * as jwtDecode_ from 'jwt-decode';
const jwtDecode = jwtDecode_;
export class StorageService {
    constructor() {
        // Storage keys
        this.TRANSACTION_ID = 'TRANSACTION_ID';
        this.VIP_TOKEN = 'VIP_TOKEN';
        this.AZURE_INSTANCE = 'AZURE_INSTANCE';
        this.LAST_LOCATION = 'LAST_LOCATION';
    }
    // VIP TOKEN
    storeVipToken(token) {
        localStorage.setItem(this.VIP_TOKEN, token);
    }
    retrieveVipToken() {
        return localStorage.getItem(this.VIP_TOKEN);
    }
    clearVipToken() {
        localStorage.removeItem(this.VIP_TOKEN);
    }
    // LAST LAST_LOCATION
    storeLastLocation() {
        const location = `${window.location.pathname}${window.location.search}`;
        console.debug('### Storing last location:');
        console.debug(window.location);
        console.debug('### location = ' + location);
        localStorage.setItem(this.LAST_LOCATION, location);
    }
    retrieveLastLocation() {
        console.debug(`### Retrieving last location: ${localStorage.getItem(this.LAST_LOCATION)}`);
        return localStorage.getItem(this.LAST_LOCATION);
    }
    clearLastLocation() {
        console.debug('### Clearing the last location');
        localStorage.removeItem(this.LAST_LOCATION);
    }
    // TRANSACTION ID
    storeTransactionId(token) {
        localStorage.setItem(this.TRANSACTION_ID, token);
    }
    retrieveTransactionId() {
        return localStorage.getItem(this.TRANSACTION_ID);
    }
    clearTransactionId() {
        localStorage.removeItem(this.TRANSACTION_ID);
    }
    // AZURE INSTANCE
    storeAzureInstance(instance) {
        localStorage.setItem(this.AZURE_INSTANCE, instance.toString());
    }
    retrieveAzureInstance() {
        return parseInt(localStorage.getItem(this.AZURE_INSTANCE), 10);
    }
    retrieveAzureTenantId() {
        const azureToken = localStorage.getItem('adal.idtoken');
        if (azureToken) {
            const decodedToken = jwtDecode(azureToken);
            // tslint:disable-next-line: no-string-literal
            return decodedToken['tid'];
        }
        else {
            return null;
        }
    }
    clearAzureInstance() {
        localStorage.removeItem(this.AZURE_INSTANCE);
    }
}
StorageService.decorators = [
    { type: Injectable }
];
StorageService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1Byb2plY3RzL25zd2hwYXV0aC1tb2R1bGUvcHJvamVjdHMvbnN3aHBhdXRoL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssVUFBVSxNQUFNLFlBQVksQ0FBQztBQUV6QyxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFFN0IsTUFBTSxPQUFPLGNBQWM7SUFRekI7UUFOQSxlQUFlO1FBQ1AsbUJBQWMsR0FBRyxnQkFBZ0IsQ0FBQztRQUNsQyxjQUFTLEdBQUcsV0FBVyxDQUFDO1FBQ3hCLG1CQUFjLEdBQUcsZ0JBQWdCLENBQUM7UUFDbEMsa0JBQWEsR0FBRyxlQUFlLENBQUM7SUFFeEIsQ0FBQztJQUVqQixZQUFZO0lBQ0wsYUFBYSxDQUFDLEtBQWE7UUFDaEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDTSxnQkFBZ0I7UUFDckIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ00sYUFBYTtRQUNsQixZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQscUJBQXFCO0lBQ2QsaUJBQWlCO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4RSxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDNUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUM1QyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUNNLG9CQUFvQjtRQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0YsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ00saUJBQWlCO1FBQ3RCLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNoRCxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsaUJBQWlCO0lBQ1Ysa0JBQWtCLENBQUMsS0FBYTtRQUNyQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLHFCQUFxQjtRQUMxQixPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxrQkFBa0I7UUFDdkIsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGlCQUFpQjtJQUNWLGtCQUFrQixDQUFDLFFBQWdCO1FBQ3hDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0scUJBQXFCO1FBQzFCLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTSxxQkFBcUI7UUFDMUIsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN4RCxJQUFJLFVBQVUsRUFBRTtZQUNkLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQVEsQ0FBQztZQUNsRCw4Q0FBOEM7WUFDOUMsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFXLENBQUM7U0FDdEM7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBRU0sa0JBQWtCO1FBQ3ZCLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7OztZQTFFRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBqd3REZWNvZGVfIGZyb20gJ2p3dC1kZWNvZGUnO1xyXG5cclxuY29uc3Qgand0RGVjb2RlID0gand0RGVjb2RlXztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RvcmFnZVNlcnZpY2Uge1xyXG5cclxuICAvLyBTdG9yYWdlIGtleXNcclxuICBwcml2YXRlIFRSQU5TQUNUSU9OX0lEID0gJ1RSQU5TQUNUSU9OX0lEJztcclxuICBwcml2YXRlIFZJUF9UT0tFTiA9ICdWSVBfVE9LRU4nO1xyXG4gIHByaXZhdGUgQVpVUkVfSU5TVEFOQ0UgPSAnQVpVUkVfSU5TVEFOQ0UnO1xyXG4gIHByaXZhdGUgTEFTVF9MT0NBVElPTiA9ICdMQVNUX0xPQ0FUSU9OJztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgLy8gVklQIFRPS0VOXHJcbiAgcHVibGljIHN0b3JlVmlwVG9rZW4odG9rZW46IHN0cmluZykge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5WSVBfVE9LRU4sIHRva2VuKTtcclxuICB9XHJcbiAgcHVibGljIHJldHJpZXZlVmlwVG9rZW4oKSB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5WSVBfVE9LRU4pO1xyXG4gIH1cclxuICBwdWJsaWMgY2xlYXJWaXBUb2tlbigpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuVklQX1RPS0VOKTtcclxuICB9XHJcblxyXG4gIC8vIExBU1QgTEFTVF9MT0NBVElPTlxyXG4gIHB1YmxpYyBzdG9yZUxhc3RMb2NhdGlvbigpIHtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0gYCR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSR7d2luZG93LmxvY2F0aW9uLnNlYXJjaH1gO1xyXG4gICAgY29uc29sZS5kZWJ1ZygnIyMjIFN0b3JpbmcgbGFzdCBsb2NhdGlvbjonKTtcclxuICAgIGNvbnNvbGUuZGVidWcod2luZG93LmxvY2F0aW9uKTtcclxuICAgIGNvbnNvbGUuZGVidWcoJyMjIyBsb2NhdGlvbiA9ICcgKyBsb2NhdGlvbik7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLkxBU1RfTE9DQVRJT04sIGxvY2F0aW9uKTtcclxuICB9XHJcbiAgcHVibGljIHJldHJpZXZlTGFzdExvY2F0aW9uKCk6IHN0cmluZyB7XHJcbiAgICBjb25zb2xlLmRlYnVnKGAjIyMgUmV0cmlldmluZyBsYXN0IGxvY2F0aW9uOiAke2xvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuTEFTVF9MT0NBVElPTil9YCk7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5MQVNUX0xPQ0FUSU9OKTtcclxuICB9XHJcbiAgcHVibGljIGNsZWFyTGFzdExvY2F0aW9uKCkge1xyXG4gICAgY29uc29sZS5kZWJ1ZygnIyMjIENsZWFyaW5nIHRoZSBsYXN0IGxvY2F0aW9uJyk7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLkxBU1RfTE9DQVRJT04pO1xyXG4gIH1cclxuXHJcbiAgLy8gVFJBTlNBQ1RJT04gSURcclxuICBwdWJsaWMgc3RvcmVUcmFuc2FjdGlvbklkKHRva2VuOiBzdHJpbmcpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuVFJBTlNBQ1RJT05fSUQsIHRva2VuKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXRyaWV2ZVRyYW5zYWN0aW9uSWQoKSB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5UUkFOU0FDVElPTl9JRCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXJUcmFuc2FjdGlvbklkKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5UUkFOU0FDVElPTl9JRCk7XHJcbiAgfVxyXG5cclxuICAvLyBBWlVSRSBJTlNUQU5DRVxyXG4gIHB1YmxpYyBzdG9yZUF6dXJlSW5zdGFuY2UoaW5zdGFuY2U6IG51bWJlcikge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5BWlVSRV9JTlNUQU5DRSwgaW5zdGFuY2UudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmV0cmlldmVBenVyZUluc3RhbmNlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5BWlVSRV9JTlNUQU5DRSksIDEwKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXRyaWV2ZUF6dXJlVGVuYW50SWQoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGF6dXJlVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYWRhbC5pZHRva2VuJyk7XHJcbiAgICBpZiAoYXp1cmVUb2tlbikge1xyXG4gICAgICBjb25zdCBkZWNvZGVkVG9rZW4gPSBqd3REZWNvZGUoYXp1cmVUb2tlbikgYXMgYW55O1xyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgIHJldHVybiBkZWNvZGVkVG9rZW5bJ3RpZCddIGFzIHN0cmluZztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsZWFyQXp1cmVJbnN0YW5jZSgpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuQVpVUkVfSU5TVEFOQ0UpO1xyXG4gIH1cclxufVxyXG4iXX0=